<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单片机原理</title>
      <link href="/2022/08/29/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
      <url>/2022/08/29/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Me"><a href="#Me" class="headerlink" title="Me"></a>Me</h1><h1 id="第一章-单片机系统概述"><a href="#第一章-单片机系统概述" class="headerlink" title="第一章   单片机系统概述"></a>第一章   单片机系统概述</h1><h2 id="1-1-单片机发展历史、发展趋势及其应用"><a href="#1-1-单片机发展历史、发展趋势及其应用" class="headerlink" title="1.1 单片机发展历史、发展趋势及其应用"></a>1.1 单片机发展历史、发展趋势及其应用</h2><p>​单片机是指一个集成在一块芯片上的完整计算机系统。尽管它的大部分功能集成在一块小芯片上，但是它具有一个完整计算机所需要的大部分部件：CPU、内存、内部和外部总线系统，目前大部分还会具有外存。同时集成诸如通讯接口、定时器，实时时钟等外围设备。而现在最强大的单片机系统甚至可以将声音、图像、网络、复杂的输入输出系统集成在一块芯片上。</p><p>单片机也被称为微控制器（Microcontroller），是因为它最早被用在工业控制领域。单片机由芯片内仅有CPU的专用处理器发展而来。最早的设计理念是通过将大量外围设备和CPU集成在一个芯片中，使计算机系统更小，更容易集成进复杂的而对体积要求严格的控制设备当中。INTEL的Z80是最早按照这种思想设计出的处理器，从此以后，单片机和专用处理器的发展便分道扬镳。</p><p>早期的单片机都是8位或4位的。其中最成功的是INTEL的8031，因为简单可靠而性能不错获得了很大的好评。此后在8031上发展出了MCS51系列单片机系统。基于这一系统的单片机系统直到现在还在广泛使用。随着工业控制领域要求的提高，开始出现了16位单片机，但因为性价比不理想并未得到很广泛的应用。90年代后随着消费电子产品大发展，单片机技术得到了巨大的提高。</p><p>随着INTEL i960系列特别是后来的ARM系列的广泛应用，32位单片机迅速取代16位单片机的高端地位，并且进入主流市场。而传统的8位单片机的性能也得到了飞速提高，处理能力比起80年代提高了数百倍。目前，高端的32位单片机主频已经超过300MHz，性能直追90年代中期的专用处理器，而普通的型号出厂价格跌落至1美元，最高端的型号也只有10美元。当代单片机系统已经不再只在裸机环境下开发和使用，大量专用的嵌入式操作系统被广泛应用在全系列的单片机上。而在作为掌上电脑和手机核心处理的高端单片机甚至可以直接使用专用的Windows和Linux操作系统。</p><p>单片机比专用处理器更适合应用于嵌入式系统，因此它得到了最多的应用。事实上单片机是世界上数量最多的计算机。现代人类生活中所用的几乎每件电子和机械产品中都会集成有单片机。手机、电话、计算器、家用电器、电子玩具、掌上电脑以及鼠标等电脑配件中都配有1-2部单片机。而个人电脑中也会有为数不少的单片机在工作。汽车上一般配备40多部单片机，复杂的工业控制系统上甚至可能有数百台单片机在同时工作！单片机的数量不仅远超过PC机和其他计算的综合，甚至比人类的数量还要多。</p><p>二、单片机诞生于20世纪70年代末，经历了SCM、MCU、SoC三大阶段。</p><p>1、SCM即单片微型计算机（Single Chip Microcomputer）阶段，主要是寻求最佳的单片形态嵌入式系统的最佳体系结构。“创新模式”获得成功，奠定了SCM与通用计算机完全不同的发展道路。在开创嵌入式系统独立发展道路上，Intel公司功不可没。</p><p>2、MCU即微控制器（Micro Controller Unit）阶段，主要的技术发展方向是：不断扩展满足嵌入式应用时，对象系统要求的各种外围电路与接口电路，突显其对象的智能化控制能力。它所涉及的领域都与对象系统相关，因此，发展MCU的重任不可避免地落在电气、电子技术厂家。从这一角度来看，Intel逐渐淡出MCU的发展也有其客观因素。在发展MCU方面，最著名的厂家当数Philips公司。 Philips公司以其在嵌入式应用方面的巨大优势，将MCS-51从单片微型计算机迅速发展到微控制器。因此，当我们回顾嵌入式系统发展道路时，不要忘记Intel和Philips的历史功绩。</p><p>3、单片机是嵌入式系统的独立发展之路，向MCU阶段发展的重要因素，就是寻求应用系统在芯片上的最大化解决；因此，专用单片机的发展自然形成了SoC化趋势。随着微电子技术、IC设计、EDA工具的发展，基于SoC的单片机应用系统设计会有较大的发展。因此，对单片机的理解可以从单片微型计算机、单片微控制器延伸到单片应用系统。</p><p>4、单片机的发展，单片机作为微型计算机的一个重要分支，应用面很广，发展很快。自单片机诞生至今，已发展为上百种系列的近千个机种。</p><p>5、 如果将8位单片机的推出作为起点，那么单片机的发展历史大致可分为以下几个阶段：</p><p>（1）第一阶段（1976-1978）：单片机的控索阶段。以Intel公司的MCS</p><p>– 48为代表。MCS – 48的推出是在工控领域的控索，参与这一控索的公司还有Motorola 、Zilog等，都取得了满意的效果。这就是SCM的诞生年代，“单机片”一词即由此而来。</p><p>（2）第二阶段（1978-1982）单片机的完善阶段。Intel公司在MCS</p><p>– 48 基础上推出了完善的、典型的单片机系列MCS –51。它在以下几个方面奠定了典型的通用总线型单片机体系结构。</p><p>①完善的外部总线。MCS-51设置了经典的8位单片机的总线结构，包括8位数据总线、16位地址总线、控制总线及具有很多机通信功能的串行通信接口。</p><p>②CPU外围功能单元的集中管理模式。</p><p>③体现工控特性的位地址空间及位操作方式。 ④指令系统趋于丰富和完善，并且增加了许多突出控制功能的指令。</p><p>（3）第三阶段（1982-1990）：8位单片机的巩固发展及16位单片机的推出阶段，也是单片机向微控制器发展的阶段。Intel公司推出的MCS</p><p>– 96系列单片机，将一些用于测控系统的模数转换器、程序运行监视器、脉宽调制器等纳入片中，体现了单片机的微控制器特征。随着MCS – 51系列的广应用，许多电气厂商竞相使用80C51为内核，将许多测控系统中使用的电路技术、接口技术、多通道A&#x2F;D转换部件、可靠性技术等应用到单片机中，增强了外围电路路功能，强化了智能控制的特征。</p><p>（</p><p>4）第四阶段（1990—）：微控制器的全面发展阶段。随着单片机在各个领域全面深入地发展和应用，出现了高速、大寻址范围、强运算能力的8位&#x2F;16位&#x2F;32位通用型单片机，以及小型廉价的专用型单片机。</p><p>三、单片机的发展趋势</p><p>目前，单片机正朝着高性能和多品种方向发展趋势将是进一步向着CMOS化、低功耗、小体积、大容量、高性能、低价格和外围电路内装化等几个方面发展。</p><p>1、下面是单片机的主要发展趋势：</p><p>（1）CMOS化</p><p>近年，由于CHMOS技术的进小，大大地促进了单片机的CMOS化。CMOS芯片除了低功耗特性之外，还具有功耗的可控性，使单片机可以工作在功耗精细管理状态。这也是今后以80C51取代8051为标准MCU芯片的原因。因为单片机芯片多数是采用CMOS（金属栅氧化物）半导体工艺生产。CMOS电路的特点是低功耗、高密度、低速度、低价格。采用双极型半导体工艺的TTL电路速度快，但功耗和芯片面积较大。随着技术和工艺水平的提高，又出现了HMOS（高密度、高速度MOS）和CHMOS工艺。CHMOS和HMOS工艺的结合。目前生产的CHMOS电路已达到LSTTL的速度，传输延迟时间小于2ns，它的综合优势已在于TTL电路。因而，在单片机领域CMOS正在逐渐取代TTL电路。</p><p>低功耗化 单片机的功耗已从Ma级，甚至1uA以下；使用电压在3~6V之间，完全适应电池工作。低功耗化的效应不仅是功耗低，而且带来了产品的高可靠性、高抗干扰能力以及产品的便携化。</p><p>（2） 低电压化</p><p>几乎所有的单片机都有WAIT、STOP等省电运行方式。允许使用的电压范围越来越宽，一般在3<del>6V范围内工作。低电压供电的单片机电源下限已可达1</del>2V。目前0.8V供电的单片机已经问世。</p><p>低噪声与高可靠性 为提高单片机的抗电磁干扰能力，使产品能适应恶劣的工作环境，满足电磁兼容性方面更高标准的要求，各单片厂家在单片机内部电路中都采用了新的技术措施。</p><p>（3） 大容量化</p><p>以往单片机内的ROM为1KB<del>4KB，RAM为64</del>128B。但在需要复杂控制的场合，该存储容量是不够的，必须进行外接扩充。为了适应这种领域的要求，须运用新的工艺，使片内存储器大容量化。目前，单片机内ROM最大可达64KB，RAM最大为2KB。</p><p>（4）高性能化</p><p>主要是指进一步改进CPU的性能，加快指令运算的速度和提高系统控制的可靠性。采用精简指令集（RISC）结构和流水线技术，可以大幅度提高运行速度。现指令速度最高者已达100MIPS（Million Instruction Per Seconds，即兆指令每秒），并加强了位处理功能、中断和定时控制功能。这类单片机的运算速度比标准的单片机高出10倍以上。由于这类单片机有极高的指令速度，就可以用软件模拟其I&#x2F;O功能，由此引入了虚拟外设的新概念。</p><p>（5）小容量、低价格化</p><p>与上述相反，以4位、8位机为中心的小容量、低价格化也是发展动向之一。这类单片机的用途是把以往用数字逻辑集成电路组成的控制电路单片化，可广泛用于家电产品。</p><p>外围电路内装化 这也是单片机发展的主要方向。随着集成度的不断提高，有可能把众多的各种处围功能器件集成在片内。除了一般必须具有的CPU、ROM、RAM、定时器&#x2F;计数器等以外，片内集成的部件还有模&#x2F;数转换器、DMA控制器、声音发生器、监视定时器、液晶显示驱动器、彩色电视机和录像机用的锁相电路等。</p><p>串行扩展技术 在很长一段时间里，通用型单片机通过三总线结构扩展外围器件成为单片机应用的主流结构。随着低价位OTP（One Time Programble）及各种类型片内程序存储器的发展，加之处围接口不断进入片内，推动了单片机“单片”应用结构的发展。特别是IC、SPI等串行总线的引入，可以使单片机的引脚设计得更少，单片机系统结构更加简化及规范化。</p><p>随着半导体集成工艺的不断发展，单片机的集成度将更高、体积将更小、功能将列强。在单片机家族中，80C51系列是其中的佼佼者，加之Intel公司将其MCS–51系列中的80C51内核使用权以专利互换或出售形式转让给全世界许多著名IC制造厂商，如Philips、 NEC、Atmel、AMD、华邦等，这些公司都在保持与80C51单片机兼容的基础上改善了80C51的许多特性。这样，80C51就变成有众多制造厂商支持的、发展出上百品种的大家族，现统称为80C51系列。80C51单片机已成为单片机发展的主流。专家认为，虽然世界上的MCU品种繁多，功能各异，开发装置也互不兼容，但是客观发展表明，80C51可能最终形成事实上的标准MCU芯片。</p><p>四、单片机的组成及特点</p><p>单片机是微型机的一个主要分支，在结构上的最大特点是把CPU、存储器、定时器和多种输入&#x2F;输出接口电路集成在一块超大规模集成电路芯片上。就其组成和功能而言，一块单片机芯片就是一台计算机。</p><p>1、 单片机的组成：</p><p>它通过内部总线把计算机的各主要部件接为一体，其内部总线包括地址总线、数据总线和控制总线。其中，地址总线的作用是在进行数据交换时提供地址，CPU通过它们将地址输出到存储器或I&#x2F;O接口；数据总线的作用是在CPU与存储器或I&#x2F;O接口之间，或存储器与外设之间交换数据；控制总线包括CPU发出的控制信号线和外部送入CPU的应答信号线等。单片机中的CPU、存储器等部件将在后面章节陆续介绍。</p><p>\2. 单片机的特点 由于单片机的这种结构形式及它所采取的半导体工艺，使其具有很多显著的特点，因而在各个领域都得到了迅猛的发展。</p><p>2、单片机主要发如下特点：</p><p>（1）有优异的性能价格比。</p><p>（2）集成度高、体积小、有很高的可靠性。单片机把各功能部件集成在一块芯片上，内部采用总线结构，减少了各芯片之间的连线，大大提高了单片机的可靠性与抗干扰能力。另外，其体积小，对于强磁场环境易于采取屏蔽措施，适合在恶劣环境下工作。</p><p>（3）控制功能强。为了满足工业控制的要求，一般单片机的指令系统中均有极丰富的转移指令、I&#x2F;O口的逻辑操作以及位处理功能。单片机的逻辑控制功能及运行速度均高于同一档次的微机。</p><p>（4）低功耗、低电压，便于生产便携式产品。</p><p>（5）外部总线增加了I C（Inter-Integrated Circuit）及SPI（Serial Peripheral Interface）等串行总线方式，进一步缩小了体积，简化了结构。</p><p>（6）单片机的系统扩展和系统配置较典型、规范，容易构成各种规模的应用系统。</p><p>五、 单片机的分类</p><p>单片机作为计算机发展的一个重要领域，应用一个较科学的分类方法。根据目前发展情况，从不同角度单片机大致可以分为通用型&#x2F;专用型、总线型&#x2F;非总线型及工控型&#x2F;家电型。</p><p>（1）通用型&#x2F;专用型 这是按单片机适用范围来区分的。例如，80C51是通用型单片机，它不是为某种专用途设计的；专用型单片机是针对一类产品甚至某一个产品设计生产的，例如为了满足电子体温计的要求，在片内集成ADC接口等功能的温度测量控制电路。</p><p>（2）总线型&#x2F;非总线型 这是按单片机是否提供并行总线来区分的。总线型单片机普遍设置有并行地址总线、数据总线、控制总线，这些引脚用以扩展并行外围器件都可通过串行口与单片机连接，另外，许多单片机已把所需要的外围器件及外设接口集成一片内，因此在许多情况下可以不要并行扩展总线，大大减省封装成本和芯片体积，这类单片机称为非总线型单片机。</p><p>（3）控制型&#x2F;家电型 这是按照单片机大致应用的领域进行区分的。一般而言，工控型寻址范围大，运算 能力强；用于家电的单片机多为专用型，通常是小封装、低价格，外围器件和外设接口集成度高。</p><p>显然，上述分类并不是惟一的和严格的。例如，80C51类单片机既是通用型又是总线型，还可以作工控用。</p><p>六、单片机的应用</p><p>由于单片机具有显著的优点，它已成为科技领域的有力工具，人类生活的得力助手。它的应用遍及各个领域，主要表现在以下几个方面：</p><p>（1）单片机在智能仪表中的应用 单片机广泛地用于各种仪器仪表，使仪器仪表智能化，并可以提高测量的自动化程度和精度，简化仪器仪表的硬件结构，提高其性能价格比。</p><p>（2）单片机在机电一体化中的应用 机电一体化是械工业发展的方向。机电一体化产品是指集成机械技术、微电子技术、计算机技术于一体，具有智能化特征的机电产品，例如微机控制的车床、钻床等。单片机作为产品中的控制器，能充分发挥它的体积小、可靠性高、功能强等优点，可大大提高机器的自动化、智能化程度。</p><p>（3）单片机在实时控制中的应用 单片机广泛地用于各种实时控制系统中。例如，在工业测控、航空航天、尖端武器、机器人等各种实时控制系统中，都可以用单片机作为控制器。单片机的实时数据处理能力和控制功能，可使系统保持在最佳工作状态，提高系统的工作效率和产品质量。</p><p>（4）单片机在分布式多机系统中的应用 在比较复杂的系统中，常采用分布式多机系统。多机系统一般由若干台功能各异的单片机组成，各自完成特定的任务，它们通过串行通信相互联系、协调工作。单片机在这种系统中往往作为一个终端机，安装在系统的某些节点上，对现场信息进行实时的测量和控制。单片机的高可靠性和强抗干扰能力，使它可以置于恶劣环境的前端工作。</p><p>（5）单片机在人类生活中的应用 自从单片机诞生以后，它就步入了人类生活，如洗衣机、电冰箱、电子玩具、收录机 等家用电器配上单片机后，提高了智能化程度，增加了功能，倍受人们喜爱。单片机将使人类生活更加方便、舒适、丰富多彩。 综合所述，单片机已成为计算机发展和应用的一个重要方面。另一方面，单片机应用的重要意义还在于，它从根本上改变了传统的控制系统设计思想和设计方法。从前必须由模拟电路或数字电路实现的大部分功能，现在已能用单片机通过软件方法来实现了。这种软件代替硬件的控制技术也称为微控制技术，是传统控制技术的一次革命。</p><p>目前单片机渗透到我们生活的各个领域，几乎很难找到哪个领域没有单片机的踪迹。导弹的导航装置，飞机上各种仪表的控制，计算机的网络通讯与数据传输，工业自动化过程的实时控制和数据处理，广泛使用的各种智能IC卡，民用豪华轿车的安全保障系统，录象机、摄象机、全自动洗衣机的控制，以及程控玩具、电子宠物等等，这些都离不开单片机。更不用说自动控制领域的机器人、智能仪表、医疗器械了。因此，单片机的学习、开发与应用将造就一批计算机应用与智能化控制的科学家、工程师。</p><p>单片机广泛应用于仪器仪表、家用电器、医用设备、航空航天、专用设备的智能化管理及过程控制等领域，大致可分如下几个范畴：</p><p>1.在智能仪器仪表上的应用</p><p>单片机具有体积小、功耗低、控制功能强、扩展灵活、微型化和使用方便等优点，广泛应用于仪器仪表中，结合不同类型的传感器，可实现诸如电压、功率、频率、湿度、温度、流量、速度、厚度、角度、长度、硬度、元素、压力等物理量的测量。采用单片机控制使得仪器仪表数字化、智能化、微型化，且功能比起采用电子或数字电路更加强大。例如精密的测量设备（功率计，示波器，各种分析仪）。</p><p>2.在工业控制中的应用</p><p>用单片机可以构成形式多样的控制系统、数据采集系统。例如工厂流水线的智能化管理，电梯智能化控制、各种报警系统，与计算机联网构成二级控制系统等。</p><p>3.在家用电器中的应用</p><p>可以这样说，现在的家用电器基本上都采用了单片机控制，从电饭褒、洗衣机、电冰箱、空调机、彩电、其他音响视频器材、再到电子秤量设备，五花八门，无所不在。</p><p>4.在计算机网络和通信领域中的应用</p><p>现代的单片机普遍具备通信接口，可以很方便地与计算机进行数据通信，为在计算机网络和通信设备间的应用提供了极好的物质条件，现在的通信设备基本上都实现了单片机智能控制，从手机，电话机、小型程控交换机、楼宇自动通信呼叫系统、列车无线通信、再到日常工作中随处可见的移动电话，集群移动通信，无线电对讲机等。</p><p>5.单片机在医用设备领域中的应用</p><p>单片机在医用设备中的用途亦相当广泛，例如医用呼吸机，各种分析仪，监护仪，超声诊断设备及病床呼叫系统等等。</p><p>6.在各种大型电器中的模块化应用</p><p>某些专用单片机设计用于实现特定功能，从而在各种电路中进行模块化应用，而不要求使用人员了解其内部结构。如音乐集成单片机，看似简单的功能，微缩在纯电子芯片中（有别于磁带机的原理），就需要复杂的类似于计算机的原理。如：音乐信号以数字的形式存于存储器中（类似于ROM），由微控制器读出，转化为模拟音乐电信号（类似于声卡）。</p><p>在大型电路中，这种模块化应用极大地缩小了体积，简化了电路，降低了损坏、错误率，也方便于更换。</p><h2 id="1-2-单片机应用系统及其设计"><a href="#1-2-单片机应用系统及其设计" class="headerlink" title="1.2 单片机应用系统及其设计"></a>1.2 单片机应用系统及其设计</h2><p>通常第一步就是选择合适的单片机，如果是一般自动化控制系统核心，那么可以是单片机、PLC、DSP、FPGA、手机和无限远程控制等几种。首先要确定控制系统是否适合使用单片机，可以从“成本、体积、性能、功能模块、可靠要求”等多方面考虑，比如是汽车某部分控制系统，一般选用单片机，如果是产线自动化设备，则选择plc。</p><p>第二，就是根据功能需求设计控制电路板，这一部分考验工程师电路系统的专业知识，一般涉及到电源、核心电路、外围电路、对外接口和外壳等等。工程师需要考虑电子元件的布局，包括制作物理边框，散热元件布局以及PCB板的布局等等。这一步需要充分考虑元件布局与走线对产品的寿命、稳定性、电磁兼容都有很大的影响。</p><p>第三，控制电路板设计好之后，就需要采购元器件、焊接电路板了。这一步需要工程师进行编程、调试，直到修改成功。如果中途出现问题，甚至会导致重做电路板。因此，这一步需要工程师耐心设计，一步步调试完成。</p><p>最后，整理材料，记录数据，总结文档。如果有必要，还应该编写相应的上位计算机程序。这一步是为将来做好准备，如果遇上相同的类型的单片机控制系统开发要求，那么这次的经验就尤为重要。</p><p>总而言之，要设计一个单片机控制系统，首先要选合适的单片机，接着就是弄清楚项目需求，根据功能设计硬件框架，可以结合参考设计，多借鉴别人的设计成果，可以试着复用到自己的项目上。慢慢的你就会发现单片机骑士也是一件迷人的东西，这不是在完成项目，而是学习知识，在提升自我的价值。</p><h1 id="第二章-单片机基础知识"><a href="#第二章-单片机基础知识" class="headerlink" title="第二章 单片机基础知识"></a>第二章 单片机基础知识</h1><h2 id="2-1-MCS-51单片机的基础结构"><a href="#2-1-MCS-51单片机的基础结构" class="headerlink" title="2.1 MCS-51单片机的基础结构"></a>2.1 MCS-51单片机的基础结构</h2><p>​MCS-51单片机芯片有许多种，如8051、8031、8751、80c51、80c31等。它由中央处理器（CPU）、时钟电路、程序存储器（ROM&#x2F;EPROM）、数据存储器（RAM）、并行I&#x2F;O口（P0~P3）、串行口、定时器&#x2F;计数器及中断系统组成。它们通过单一总线连接，并被集成在一块半导体芯片上，即单片微型计算机（Single-Chip Microcomputer）。</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202211201744137.gif"></p><h3 id="中央处理器CPU"><a href="#中央处理器CPU" class="headerlink" title="中央处理器CPU"></a>中央处理器CPU</h3><p>中央处理器CPU是单片机内部的核心部件，它决定了单片机的主要功能特性，由运算器和控制器两部分组成。</p><p>1、  运算器</p><p>运算器是计算机的运算部件，用于实现算术逻辑运算、位变量处理、移位和数据传送等操作。它是以算术逻辑单元ALU为核心，加上累加器ACC、寄存器B、暂存器TMP1和TMP2、程序状态字PSW以及十进制调整电路和专门用于位操作的布尔处理器组成。</p><p>   （1）算术逻辑单元</p><p>算术逻辑单元ALU用来完成二进制数的四则运算和布尔代数的逻辑运算。此外，通过对运算结果的判断影响程序状态标志寄存器的有关标志位。</p><p>   （2）累加器</p><p>累加器ACC为8位的寄存器，是CPU中使用最频繁的寄存器。它既可以用于存放操作数，也可以存放中间结果。MCS-51中大部分单操作数指令的操作数就取自累加器ACC，许多双操作数指令中的一个操作数也取自累加器ACC，单片机中大部分数据操作都通过累加器ACC进行的。</p><p>  （3）寄存器B</p><p>寄存器B是个8位寄存器，是为ALU进行乘除运算设置的。在执行乘法运算指令时，寄存器B用于存放其中一个乘数和乘积的高8位。在执行除法时，用于存放除数和余数。还可以作为一般的寄存器来使用。</p><p>（4）程序状态字PSW</p><p>程序状态字PSW是个8位的特殊功能寄存器，它的各位包含了程序运行的状态信息，以供程序查询和判断。PSW格式和含义如下：</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202211201759558.png" alt="image-20221120175950090"></p><ol><li>Cy  进位标志位。Cy是PSW中最常用的标志位。由硬件或软件置位和清零。它表示运算结果是否有进位（借位）。如果运行结果在最高位有进位输出（加法）或借位输入（减法）时，则Cy由硬件置“1”；否则Cy被请“0”。</li><li>AC  辅助（半）进位标志。当执行减法运算时，运算结果产生低四位向高四位进位或借位时，由硬件置“1”；否则清“0”。</li><li>F0 用户标志位。由用户定义使用*。</li><li>RS1和RS0 工作寄存器组选择位。这两位的值决定选择哪一组寄存器作为当前寄存器组。</li><li>OV 溢出标志位。</li><li>P 奇偶标志位。P标志表明ACC中1个数的奇偶性。在每条指令执行完后，单片机根据ACC内容对P位自动置位或复位。若累加器ACC中有奇数个1，则P&#x3D;1；若累加器ACC中有偶数个1，则P&#x3D;0。</li></ol><p>（<em>5</em>）布尔处理器</p><p>控制器</p><p>控制器是计算机的指挥控制部件，它包括程序计数器PC、指令寄存器IR、指令译码器ID、数据指针DPTR、堆栈指针SP以及定时控制与条件转移逻辑电路等。它对来自存储器中的指令进行译码，并通过定时和控制电路在规定的时刻发出各种操作所需的控制信号，使各种部件协调工作，完成指令所规定的操作。</p><p>（1）程序计数器PC（Program Counter）</p><p>PC是一个16位计数器。实际上PC是程序存储器的字节地址计数器，其内容是将要执行的下一条指令的地址，寻址范围达64k（216&#x3D;65536&#x3D;64k）。PC有自动加1的功能，从而实现程序的顺序执行。可以通过转移、调用、返回等指令改变其内容，以实现程序的转移。</p><p>   （2）指令译码器ID</p><p>当指令取出经指令寄存器IR送至指令译码器ID时，ID对该指令进行译码，即把指令转变成所需的电平信号。CPU根据ID输出的电平信号使定时控制电路定时地产生执行该指令所需的各种控制信号，以使计算机能正确执行程序所要求的各种操作。</p><p>（3）数据指针DPTR</p><p>数据指针DPTR为16位寄存器。它的功能是存放16位的地址，作为访问外部程序存储器和外部数据存储器的地址。编程时，DPTR即可按16位寄存器使用，也可以按两个8位寄存器使用，即DPH为DPTR高8位，DPL位DPTR的低8位。</p><h3 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h3><p>8051单片机在系统结构上采用哈佛结构，将程序和数据分别存放在两个存储器内。它与采用冯·诺依曼结构，程序和数据共用一个存储器的通用计算机不同。8051的存储器在物理结构上分为程序存储器（ROM）和数据存储器（RAM），有四个物理上相互独立的存储空间，即片内ROM和片外ROM,片内RAM和片外RAM。<br><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202211201813007.png" alt="image-20221120181301001"></p><p>从用户使用的角度看，8051存储空间分为三类：片内、片外统一编址0000H<del>FFFFH的64k程序存储器地址空间；256字节数据存储器地址空间，地址为：00H</del>FFH，64k片外数据存储器或I&#x2F;O地址空间。</p><p>上述的三个地址空间是重叠的，即程序存储器中片内外低4k地址重叠；数据存储器与程序存储器64k地址全部重叠；数据存储器中片内外低256字节地址重叠。虽然地址重叠，但由于采用了不同的操作指令及控制信号EA、PSEN的选择，因此不会发生混乱。</p><p>1、程序存储器</p><p>程序存储器用来存放程序代码和常数，分为片内、片外两大部分，即片内ROM和片外ROM。其中8051内部有4K的ROM，地址范围为0000H~0FFFH，片外用16位地址线扩充64K的ROM，两者统一编址。</p><p>单片机从片内ROM取指令（EA&#x3D;1）还是从片外ROM（EA&#x3D;0）取指令，取决于CPU引脚EA的电平高低。</p><p>8051从片内ROM和片外ROM取指令时执行速度相同。</p><p>在程序存储器中有些特殊单元。</p><p>0000H~0002H   系统复位向量区</p><p>0003H~000AH   INT0中断地址区</p><p>000BH~0012H   T&#x2F;C0中断地址区</p><p>0013H~001AH   INT1中断地址区</p><p>001BH~0022H   T&#x2F;C1中断地址区</p><p>0023H~002AH   串行口中断地址区</p><p>2、片内数据存储器</p><p>数据存储器用来存放运算的中间结果、标志位，以及数据的暂存和缓冲等。分为片内、片外两部分。8051片内数据存储器按功能划分为低128(00H<del>7F)单元和高128（80</del>FFH）单元。<br><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202211201813661.png" alt="image-20221120181352251"></p><p>3、片外数据存储器</p><p>片外数据存储器，即片外RAM，一般由静态RAM芯片组成。用户可根据需要确定扩展存储器的容量，MCS-51单片机访问片外RAM可用特殊功能寄存器－－数据指针DPTR，最大容量为64K。</p><p>片外RAM地址范围为0000H<del>FFFFH，其中0000H</del>00FFH区间与片内数据存储空间是重叠。CPU使用MOV指令和MOVX指令加以区分。</p>]]></content>
      
      
      
        <tags>
            
            <tag> -专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动控制原理</title>
      <link href="/2022/08/29/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/"/>
      <url>/2022/08/29/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="No-garden-without-its-weeds"><a href="#No-garden-without-its-weeds" class="headerlink" title="No garden without its weeds."></a>No garden without its weeds.</h1><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="1-什么是自动控制？"><a href="#1-什么是自动控制？" class="headerlink" title="1.什么是自动控制？"></a>1.什么是自动控制？</h2><p>自动控制：是在无人直接参与情况下，利用控制装置操纵受控对象，是被控量等于给定值或给定信号的变化规律去变化的方程。</p><h2 id="2-自动控制方式？"><a href="#2-自动控制方式？" class="headerlink" title="2.自动控制方式？"></a>2.自动控制方式？</h2><p>——开环</p><p>——闭环</p><h2 id="3开环、闭环概念"><a href="#3开环、闭环概念" class="headerlink" title="3开环、闭环概念"></a>3开环、闭环概念</h2><p>开环——控制装置与受控对象之间只有顺向作用而无反向联系</p><p>特点</p>]]></content>
      
      
      
        <tags>
            
            <tag> -专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA加减密算法</title>
      <link href="/2022/08/05/RSA%E5%8A%A0%E5%87%8F%E5%AF%86%E7%AE%97%E6%B3%95/"/>
      <url>/2022/08/05/RSA%E5%8A%A0%E5%87%8F%E5%AF%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><p>帮朋友解一个密题，顺便学习了RSA加密算法，扩充一下自己知识领域</p><h1 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h1><h2 id="RSA起源"><a href="#RSA起源" class="headerlink" title="RSA起源"></a>RSA起源</h2><p><a href="https://so.csdn.net/so/search?q=RSA&spm=1001.2101.3001.7020">RSA</a>是一种公钥密码算法，它的名字由三位开发者，即Ron Rivest、Adi Shamir和Leonard Adleman的姓氏的首字母组成的。</p><p>RSA被用于<a href="https://so.csdn.net/so/search?q=%E5%85%AC%E9%92%A5&spm=1001.2101.3001.7020">公钥</a>密码和数字签名。</p><h2 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h2><p>在RSA中，明文、密钥和密文都是数字。RSA的加密过程可以用下面的公式来表达。</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202208051200289.png"></p><p>RSA的密文是对代表了明文的数字的E次方求mod N的结果。换句话说，就是将明文和自己做E次乘方，然后将其结果除以N求余数，这个余数就是密文。</p><p>加密公式中出现了两个数——E和N，到底都是什么数呢？RSA的加密是求明文的E次方mod N，因此只要知道E和N这两个数，任何人都可以完成加密的运算。所以说，E和N是RSA加密的密钥，也就是说，E和N的组合就是公钥。</p><p>不过，E和N并不是随便什么数都可以的，它们是经过严密计算得出的。其中E是加密（Encryption）的首字母，N是数字（Number）首字母。</p><p>有一个很容易引起误解的地方——E和N这两个数并不是密钥对（公钥和私钥的密钥对）。E和N两个数才组成一个公钥，因此我们一般会写出“公钥是（E，N）”或者“公钥是{E，N}”这样的形式，将E和N用括号括起来。</p><h2 id="RSA解密"><a href="#RSA解密" class="headerlink" title="RSA解密"></a>RSA解密</h2><p><img src="https://img-blog.csdn.net/20180916155256423?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>该公式表示对密文的数字的D次方求mod N就可以得到明文。换句话说，将密文自己做D次乘法，再对其结果除以N求余数，就可以得到明文。</p><p>这里使用的数字N和加密时使用的数字N是相同的。数D和数N组成起来就是RSA的解密密钥，因此D和N的组合就是私钥。只有知道D和N两个数的人才能够完成解密的运算。由于N是公钥的一部分，是公开的，因此单独将D称为私钥也是可以的。</p><p>在RSA中，加密和解密的形式是相同的。加密是求“E次方的modN”，而解密则是求“D次方的modN”。</p><p>当然，D也并不是随便什么数都可以的，作为解密密钥的D，和数字E有着相当紧密的联系。否则，用E加密的结果可以用D来解密这样的机制是无法实现的。</p><p>D是解密（Decryption）的首字母，N是数字（Number）的首字母。</p><h2 id="RSA算法过程"><a href="#RSA算法过程" class="headerlink" title="RSA算法过程"></a>RSA算法过程</h2><h3 id="1-产生密钥"><a href="#1-产生密钥" class="headerlink" title="1.产生密钥"></a>1.产生密钥</h3><ol><li><p>为了产生两个密钥，选取两个大素数，p和q,为了获得最大程度的安全性，两数的长度一样。计算乘积</p><p><code>n=p*q;</code></p></li><li><p>随机取加密密钥e,使得e 和（p-1)（q-1) 互素，最后采用扩展欧几里得算法计算解密密钥d，</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d=e^-1 mod (p-1)(q-1)</span><br></pre></td></tr></table></figure><p>注意</p><p>d和n也是互素。e和n是公开密钥，d是私人密钥。</p><p>RSA加解密的算法完全相同，设A为明文，B为密文，则：</p><p> A&#x3D;B^d mod n；</p><p> B&#x3D;A^e mod n；</p><p>公钥加密体制中，一般用公钥加密，私钥解密</p><p>e1和e2可以互换使用，即：</p><p> A&#x3D;B^e mod n；</p><p> B&#x3D;A^d mod n;</p><p>我们可以设计出一对公私密钥，加密密钥（公钥）为：KU &#x3D;(e,n)&#x3D;(3,33)，解密密钥（私钥）为：KR &#x3D;(d,n)&#x3D;(7,33)。</p><h3 id="2-英文数字化"><a href="#2-英文数字化" class="headerlink" title="2.英文数字化"></a>2.英文数字化</h3><p>将明文信息数字化，并将每块两个数字分组。假定明文英文字母编码表为按字母顺序排列数值，</p><h3 id="3、明文加密"><a href="#3、明文加密" class="headerlink" title="3、明文加密"></a>3、明文加密</h3><p>**加密消息m时，首先将它分为比n小的数据分组（采用二级制数，选取小于n的2的最大次幂），也就是说，若果p和n为100位的素数，那么n将有200位，每个消息分组m应该小于200位长 **</p><p>　用户加密密钥(3,33) 将数字化明文分组信息加密成密文。由<code>C≡M^e(mod n)</code>得：</p><h3 id="4-密文解密"><a href="#4-密文解密" class="headerlink" title="4.密文解密"></a>4.密文解密</h3><p>用户B收到密文，若将其解密，只需要计算 <code>M≡c^d(mod n)</code></p><p><img src="https://images2018.cnblogs.com/blog/1368530/201806/1368530-20180614144137776-552051524.png" alt="img"></p><p>　用户B得到明文信息为：11，05，25。根据上面的编码表将其转换为英文，我们又得到了恢复后的原文“key”</p><p>e值</p><p>最常用的三个e值：3, 17, 65537(2^16+1).</p><p>X.509中建议采用65537[<a href="https://blog.csdn.net/buzul/article/details/108622950?ops_request_misc=%7B%22request_id%22:%22165967191016781432948792%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165967191016781432948792&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-108622950-null-null.142%5Ev39%5Epc_rank_34,185%5Ev2%5Econtrol&utm_term=RSA&spm=1018.2226.3001.4187#fn1">1]</a>, PEM中建议采用3[37],PKCS#1建议采用3或65537[1345].</p><h2 id="RSA常用python计算脚本"><a href="#RSA常用python计算脚本" class="headerlink" title="RSA常用python计算脚本"></a>RSA常用python计算脚本</h2><p><a href="https://blog.csdn.net/m0_46230316/article/details/105904020">(126条消息) 个人收集的RSA常用脚本_mon0dy的博客-CSDN博客_rsa脚本</a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Math is cool! Use the RSA algorithm to decode the secret message, c, p, q, and e are parameters for the RSA algorithm.</p><p>p &#x3D;  9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483<br>q &#x3D;  11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407<br>e &#x3D;  65537<br>c &#x3D;  83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</p><p>Use RSA to find the secret message</p><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><p>import gmpy2</p><p>def Decrypt(c,e,p,q):</p><p>  L&#x3D;(p-1)*(q-1)</p><p>  d&#x3D;gmpy2.invert(e,L)</p><p>  n&#x3D;p*q</p><p>  m&#x3D;gmpy2.powmod(c,d,n)</p><p>  flag&#x3D;str(m)</p><p>  print(“flag{“+flag+”}”)</p><p>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:</p><p>  p &#x3D; 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</p><p>  q &#x3D; 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</p><p>  n &#x3D; p * q</p><p>  e &#x3D; 65537</p><p>  c &#x3D; 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</p><p>  Decrypt(c,e,p,q)</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RSA算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超详细从零开始yolov5模型训练</title>
      <link href="/2022/07/21/YOLO5%E4%B8%8A%E6%89%8B%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/07/21/YOLO5%E4%B8%8A%E6%89%8B%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="YOLO图像训练测试"><a href="#YOLO图像训练测试" class="headerlink" title="YOLO图像训练测试"></a>YOLO图像训练测试</h1><p>前言：本文将介绍<a href="https://so.csdn.net/so/search?q=yolov5&spm=1001.2101.3001.7020">yolov5</a>从环境搭建到模型训练的整个过程。最后训练识别浣熊的模型。</p><p>1.anconda环境搭建<br>2.yolov5下载<br>3.素材整理<br>4.模型训练<br>5.效果预测</p><p><strong>目录</strong></p><p>[TOC]</p><h1 id="1-anconda环境搭建"><a href="#1-anconda环境搭建" class="headerlink" title="1.anconda环境搭建"></a>1.anconda环境搭建</h1><p>提醒：所有操作都是在anconda的yolo的环境下进行的，在创建yolo环境后，之后每次进入CMD都需要切换到yolo环境中去（否则进入默认的base环境中）</p><p><a href="https://www.anaconda.com/products/individual#Downloads">https://www.anaconda.com/products/individual#Downloads</a><br>下载对应版本anconda即可，这里就不介绍anconda安装过程了。</p><p>anconda安装好后，conda可以创建多个运行环境，默认是base环境。这里我们为yolo5创建一个环境。<br>打开CMD命令行，为yolov5创建一个环境，注意这里用的python版本是3.8，版本过低后面可能会报错</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n yolo5 python=3.8 </span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda info -e</span><br></pre></td></tr></table></figure><p>即可看到我们刚刚创建的yolo5环境</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212258575.png" alt="image-20220721174054800"></p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">activate yolo</span><br></pre></td></tr></table></figure><p>即可切换到我们的yolo环境下了。记住退出CMD或者切换CMD窗口之后，如果想要进入我们的yolo环境，都需要运行activate yolo指令。不然默认是在base环境下。</p><p>作者使用Pycharm进行本地多个Python环境进行管理</p><p>Pycharm安装教程链接： <a href="https://blog.csdn.net/weixin_42855758/article/details/122312020?ops_request_misc=&request_id=&biz_id=102&utm_term=pycahrm%E5%AE%89%E8%A3%85&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-122312020.142%5Ev33%5Eexperiment_2_v1,185%5Ev2%5Econtrol&spm=1018.2226.3001.4187">(99条消息) Pycharm的安装与激活（超详细）_基QI学习的博客-CSDN博客_pycharm激活</a></p><p>Pycharm——Python多环境搭建： <a href="https://blog.csdn.net/qq_37664149/article/details/81559587">(99条消息) Pycharm 配置多版本python环境_democwf的博客-CSDN博客</a></p><h1 id="2-yolov5下载"><a href="#2-yolov5下载" class="headerlink" title="2.yolov5下载"></a>2.yolov5下载</h1><p>1.下载yolo5源码</p><p>这里有两种方式进行下载：<br>①Yolov5 <a href="https://so.csdn.net/so/search?q=Github&spm=1001.2101.3001.7020">Github</a>地址：<a href="https://github.com/ultralytics/yolov5">https://github.com/ultralytics/yolov5</a><br>点击链接后，进入以下界面，可以点击<code>Code-&gt;Download ZIP</code>下载yolov5</p><p><img src="https://img-blog.csdnimg.cn/34305fe76a0248fc9ad280f7218973a3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP5bCP5pif5Lqu5pm25pm2,size_19,color_FFFFFF,t_70,g_se,x_16"></p><p>②也可以<code>Win+R</code>打开命令行窗口，直接<code>git clone</code>到本地工作目录,选择，等待下载完成：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git clone https://github.com/ultralytics/yolov5</span><br></pre></td></tr></table></figure><p>下载完成后，在本地文件夹如下图</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212258193.png" alt="image-20220721211519661"></p><p>接下来用PyCharm打开yolo5本地文件夹</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212259431.png" alt="image-20220721211720971"></p><p>此处我们已经选择了刚刚建立的yolo5项目Python环境</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212259328.png" alt="image-20220721211855954"></p><p>文件夹里也包含了train.py文件，这个也是我们接下来训练yolo模型需要用到的启动文件。（大家看到的文件夹内容会和我的有点不一样，因为我的下载下来后又添加了一些文件）</p><p>requirements.txt文件里包含了yolo5所需要的第三方库，按照文件第一句提示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>在命令行输入这句代码即可下载所需库</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212259452.png" alt="image-20220721212318771"></p><p>接下来我们就要开始训练yolo模型了。</p><h1 id="3-素材整理"><a href="#3-素材整理" class="headerlink" title="3.素材整理"></a>3.素材整理</h1><p>素材的文件夹结构有要求格式：</p><p>​<img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212259008.png" alt="image-20220721213034007"></p><p>这是我的数据集文件夹，提供大家作为参考</p><p>接下来叫大家制作数据集</p><p>首先是照片，数量越多，训练出的模型效果越好。但也要根据自身需要，数量越多，训练时间越长。</p><p>接着是制作标签文件，作者使用的是labelImg，如果电脑上没有安装labelImg，参考教程在自己电脑安装</p><p>参教程如下：</p><p><a href="https://blog.csdn.net/weixin_42899627/article/details/109000509?ops_request_misc=%7B%22request_id%22:%22165841087016782388022622%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165841087016782388022622&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-109000509-null-null.142%5Ev33%5Eexperiment_2_v1,185%5Ev2%5Econtrol&utm_term=labelImg&spm=1018.2226.3001.4187">(99条消息) labelImg使用教程_G果的博客-CSDN博客_labelimg使用教程</a></p><p><strong>安装 labelImg</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install labelImg #直接命令行输入</span><br></pre></td></tr></table></figure><p><strong>启动 labelImg</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">labelImg #直接命令行输入名称即可</span><br></pre></td></tr></table></figure><p>启动界面如下：</p><p><img src="https://img-blog.csdnimg.cn/20201010185745568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5OTYyNw==,size_16,color_FFFFFF,t_70#pic_center"></p><p><strong>注意：change save dir： 如果指定好图片路径后发现没有之前的标签，说明<a href="https://so.csdn.net/so/search?q=xml&spm=1001.2101.3001.7020">xml</a>的路径指定错了，需要重新指定路径</strong></p><p><strong>注意：（因为使用cv2.imread读取图像，路径中不能有中文）<br>特别注意： 路径有中文也会导致图片和xml文件匹配不上，labelimg上不显示框</strong></p><p>快捷键：W（创建方框），A（上一张），D（下一张）</p><p>可事先将训练的图片（train-&gt;images）与验证的照片（val-&gt;images）放到对应文件，<strong>文件名应有一致性</strong>，保证训练正常进行，例下图</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212259256.png"></p><p>，标签保存在对应的labels文件夹里，标签文件如下：</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212259672.png" alt="image-20220721215609452"></p><p>labelImg常规生成的是xml文件，还需要将xml文件转化成yolo5使用的txt文件，在照片文件夹目录创建一个Python文件，将以下代码放入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import xml.etree.ElementTree as ET</span><br><span class="line">import os</span><br><span class="line">from os import getcwd</span><br><span class="line"></span><br><span class="line">sets = [&#x27;train&#x27;, &#x27;val&#x27;]</span><br><span class="line">classes = [&quot;reccon&quot;]   # 改成自己的类别</span><br><span class="line">abs_path = os.getcwd()</span><br><span class="line">print(abs_path)</span><br><span class="line"></span><br><span class="line">def convert(size, box):</span><br><span class="line">    dw = 1. / (size[0])</span><br><span class="line">    dh = 1. / (size[1])</span><br><span class="line">    x = (box[0] + box[1]) / 2.0 - 1</span><br><span class="line">    y = (box[2] + box[3]) / 2.0 - 1</span><br><span class="line">    w = box[1] - box[0]</span><br><span class="line">    h = box[3] - box[2]</span><br><span class="line">    x = x * dw</span><br><span class="line">    w = w * dw</span><br><span class="line">    y = y * dh</span><br><span class="line">    h = h * dh</span><br><span class="line">    return x, y, w, h</span><br><span class="line"></span><br><span class="line">def convert_annotation(image_id):</span><br><span class="line">    in_file = open(&#x27;G:/yolov5/paper_data/Annotations/%s.xml&#x27; % (image_id), encoding=&#x27;UTF-8&#x27;) #修改成自己的xml文件路径</span><br><span class="line">    out_file = open(&#x27;G:/yolov5/paper_data/labels/%s.txt&#x27; % (image_id), &#x27;w&#x27;)   #修改成自己将保存txt文件的路径</span><br><span class="line">    tree = ET.parse(in_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    size = root.find(&#x27;size&#x27;)</span><br><span class="line">    w = int(size.find(&#x27;width&#x27;).text)</span><br><span class="line">    h = int(size.find(&#x27;height&#x27;).text)</span><br><span class="line">    for obj in root.iter(&#x27;object&#x27;):</span><br><span class="line">        difficult = obj.find(&#x27;difficult&#x27;).text</span><br><span class="line">        #difficult = obj.find(&#x27;reccon&#x27;).text</span><br><span class="line">        cls = obj.find(&#x27;name&#x27;).text</span><br><span class="line">        if cls not in classes or int(difficult) == 1:</span><br><span class="line">            continue</span><br><span class="line">        cls_id = classes.index(cls)</span><br><span class="line">        xmlbox = obj.find(&#x27;bndbox&#x27;)</span><br><span class="line">        b = (float(xmlbox.find(&#x27;xmin&#x27;).text), float(xmlbox.find(&#x27;xmax&#x27;).text), float(xmlbox.find(&#x27;ymin&#x27;).text),</span><br><span class="line">             float(xmlbox.find(&#x27;ymax&#x27;).text))</span><br><span class="line">        b1, b2, b3, b4 = b</span><br><span class="line">        # 标注越界修正</span><br><span class="line">        if b2 &gt; w:</span><br><span class="line">            b2 = w</span><br><span class="line">        if b4 &gt; h:</span><br><span class="line">            b4 = h</span><br><span class="line">        b = (b1, b2, b3, b4)</span><br><span class="line">        bb = convert((w, h), b)</span><br><span class="line">        out_file.write(str(cls_id) + &quot; &quot; + &quot; &quot;.join([str(a) for a in bb]) + &#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">wd = getcwd()</span><br><span class="line">for image_set in sets:</span><br><span class="line">    if not os.path.exists(&#x27;G:/yolov5/paper_data/labels/&#x27;): #修改成自己的路径</span><br><span class="line">        os.makedirs(&#x27;G:/yolov5/paper_data/labels/&#x27;) #修改成自己的路径</span><br><span class="line">    image_ids = open(&#x27;G:/yolov5/paper_data/ImageSets/Main/%s.txt&#x27; %  #修改成自己的路径(image_set)).read().strip().split()</span><br><span class="line">    list_file = open(&#x27;G:/yolov5/paper_data/%s.txt&#x27; % (image_set), &#x27;w&#x27;) #修改成自己的路径</span><br><span class="line">    for image_id in image_ids:</span><br><span class="line">        list_file.write(abs_path + &#x27;/paper_data/images/%s.jpg\n&#x27; % (image_id)) #修改成自己的路径</span><br><span class="line">        convert_annotation(image_id)</span><br><span class="line">    list_file.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行程序会自动生成文件，转化后的txt标签文件保存在labels文件夹里，自己分类到对应的文件夹里</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212259546.png" alt="image-20220721221843140"></p><p>最后时配置文件 xxx.yaml（本项目是reccon.yaml）</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212259390.png"></p><p>本项目是做目标识别，故只有一个标签</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">train: G:\yolov5\reccon\train  #对应训练集文件夹路径   根据自己的修改</span><br><span class="line">val: G:\yolov5\reccon\val     #对应验证集文件夹路径   根据自己的修改</span><br><span class="line">nc: 1 #标签类别根据自己的修改</span><br><span class="line">name: [&#x27;reccon&#x27;]   #标签名称，有几个写几个，按格式 [&#x27;a&#x27;]根据自己的修改</span><br></pre></td></tr></table></figure><p>如此数据集制作完成</p><h1 id="4-模型训练"><a href="#4-模型训练" class="headerlink" title="4.模型训练"></a>4.模型训练</h1><p>首先修改train,py文件</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212259782.png" alt="image-20220721222039400"></p><p>修改如下：</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212259577.png" alt="image-20220721222249946"></p><p>完成接下来晕运行train.py文件</p><p>开始训练！！！！！</p><h1 id="5-效果预测"><a href="#5-效果预测" class="headerlink" title="5.效果预测"></a>5.效果预测</h1><p>作者使用CPU版本，训练使用了接近三个小时，</p><p>在本地文件夹中生成本次识别的结果<br><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212259744.png" alt="image-20220721223424930"></p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212300333.png" alt="image-20220721223440691"></p><p>文件夹内包含模型训练时各项数据以及曲线图，生成的模型保存在weights文件夹里</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212300607.png" alt="image-20220721223605812"></p><p>到此训练结束，我们就可以使用自己训练的模型来识别，</p><p>下来修改detect.py文件</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212300871.png" alt="image-20220721223945214"></p><p>运行detect.py文件</p><p>在本次目录生成一次测试，因为使用的是视频，所以生成的也是一个视频、</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207212300007.png" alt="image-20220721224050969"></p><iframe style='width: 600px;height: 338px' frameborder='no' allowfullscreen mozallowfullscreen webkitallowfullscreen src='http://go.plvideo.cn/front/video/preview?vid=3c68a9fa28f5d0604e3b22ea59eccf84_3'></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> yolo5 </tag>
            
            <tag> 图像训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数电学习</title>
      <link href="/2022/07/17/%E6%95%B0%E7%94%B5%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/07/17/%E6%95%B0%E7%94%B5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Books-and-friends-should-be-few-but-good"><a href="#Books-and-friends-should-be-few-but-good" class="headerlink" title="Books and friends should be few but good."></a>Books and friends should be few but good.</h1><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="1-1-常见的数制"><a href="#1-1-常见的数制" class="headerlink" title="1.1 常见的数制"></a>1.1 常见的数制</h2><h3 id="1-1-1-十进制"><a href="#1-1-1-十进制" class="headerlink" title="1.1.1 十进制"></a>1.1.1 十进制</h3><p>十进制是使用最为普遍的一种。十进制的基数为10，数码由0-9组成，计数规律逢十进1.</p><h3 id="1-1-2-二进制"><a href="#1-1-2-二进制" class="headerlink" title="1.1.2 二进制"></a>1.1.2 二进制</h3><p>两个特点：它由两个数码0，1组成，二进制数运算规律是逢二进一。</p><p>二进制只有数字0和1.可以通过具有两个不同状态的元件来表示二进制，比如电器的开关，某一节电流的有无，某一节电压的高低等。</p><h3 id="1-1-3-八进制"><a href="#1-1-3-八进制" class="headerlink" title="1.1.3 八进制"></a>1.1.3 八进制</h3><p>八进制的基数有数码0、1、2、3、4、5、6、7，并且每个数码正好对应三位二进制数，所以八进制能很好地反映二进制。</p><h3 id="1-1-4-十六进制"><a href="#1-1-4-十六进制" class="headerlink" title="1.1.4 十六进制"></a>1.1.4 十六进制</h3><p>由十六个数码：数字0～9加上字母A-F组成（它们分别表示十进制数10～15），十六进制数运算规律是逢十六进一。C语言中，常用前缀0x表示十六进制。</p><h2 id="1-2-进制转换"><a href="#1-2-进制转换" class="headerlink" title="1.2 进制转换"></a>1.2 进制转换</h2><h3 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h3><p>1.十进制转二进制的转换原理：除以2，反向取余数，直到商为0终止。</p><p>2.将某个十进制数除2得到的整数部分保留，作为第二次除2时的被除数，得到的余数依次记下，重复上述步骤，直到整数部分为0就结束，将所有得到的余数最终逆序输出，则为该十进制对应的二进制数。</p><p><img src="https://pic3.zhimg.com/v2-8645834bb4f0599790480ec516fd584a_r.jpg"></p><h3 id="十进制转八进制"><a href="#十进制转八进制" class="headerlink" title="十进制转八进制"></a>十进制转八进制</h3><p>1.转换原理：除以8，反向取余数，直到商为0终止。</p><p>2.具体步骤与二进制一样</p><p>例如：十进制数796转换成八进制数：</p><p>将796除8取得第一个余数为4，将除8得到的整数部分99作为第二次的被除数，重复上述步骤，直至最终整数部分为0就结束。将取得的所有余数逆序输出</p><p>则为：796–&gt;1434</p><p><img src="https://pic4.zhimg.com/v2-353a0c78cda2ae6f1a6d1524a8b6b22f_r.jpg"></p><h3 id="十进制转十六进制"><a href="#十进制转十六进制" class="headerlink" title="十进制转十六进制"></a>十进制转十六进制</h3><p>1.转换原理：除以16，反向取余数，直到商为0终止。</p><p>2.具体步骤也和二进制、八进制一样，重复上述做法即可得到十六进制数。</p><p>例如：十进制数796转换为十六进制数<br>即为：796–&gt;31c</p><p><img src="https://pic3.zhimg.com/v2-895f1fdf276ae7db28ad9cd3e8d9de42_r.jpg"></p><p>注：需要注意的是，十六进制数是由0-9和A-F(或者a-f)组成的，A相当于十进制中的10，B相当于11，依次类推，F相当与15，上述事例中取得的余数12即为十六进制中的c</p><h3 id="小数部分进制表"><a href="#小数部分进制表" class="headerlink" title="小数部分进制表"></a>小数部分进制表</h3><p><img src="https://pic3.zhimg.com/v2-1e003eec8a44e3061c5730f02f68f40e_r.jpg"></p><h2 id="1-3-二进制算术运算"><a href="#1-3-二进制算术运算" class="headerlink" title="1.3 二进制算术运算"></a>1.3 二进制算术运算</h2><h3 id="1-3-1-二进制算术特点"><a href="#1-3-1-二进制算术特点" class="headerlink" title="1.3.1 二进制算术特点"></a>1.3.1 二进制算术特点</h3><p>1.二进制加法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0＋0＝0</span><br><span class="line">0＋1＝1＋0＝1</span><br><span class="line">1＋1＝0　（进位为1） </span><br><span class="line">1＋1＋1＝1 （进位为1）</span><br></pre></td></tr></table></figure><p>例如：1110和1011相加过程如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/854027-0c13829c4b3a416f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/180/format/webp"></p><p>2.二进制减法</p><img src="https://pic3.zhimg.com/v2-108973ba44e2730b5977b16583d09f06_r.jpg" style="zoom:50%;" /><p>3.二进制乘法</p><img src="https://pic4.zhimg.com/v2-e3de74fc171b5190c7c426f88a54d89b_r.jpg" style="zoom:50%;" /><p>4.二进制除法</p><img src="https://pic4.zhimg.com/v2-05f84e011c9610092596541c4b3453c3_r.jpg" style="zoom:50%;" /><h3 id="1-3-2-反码、补码和补码运算"><a href="#1-3-2-反码、补码和补码运算" class="headerlink" title="1.3.2 反码、补码和补码运算"></a>1.3.2 反码、补码和补码运算</h3><p>在数字系统中，表示二进制数的方法有三种，原码、反码和补码。</p><p>二进制数的补码是这样定义的，最高位为符号位，正数为0，负数为1.</p><p>正数的补码和它的原码相同；负数的补码对原码逐位取反，再在最低位上加1得到。</p><p>下图是两个例子，</p><p>+45的二进制数为101101，如图所示，在最高位前面加上符号位0，即形成+45的补码0101101.</p><p>为了得到十进制数-45的补码，只要对+45的补码0101101求反加1，即1010011.</p><img src="https://pic2.zhimg.com/v2-4562d84175d335701ef1465ca6fa54cd_r.jpg" style="zoom:50%;" /><p>值得注意的是，n位补码表示的二进制数，其可以表示的最大十进制数正数为2的n-1次方再减一，可以表示的最小负数为-2的n-1次方。</p><p>例如，8位补码可以表示的最大二进制正数为0111 1111.即十进制数 2^7-1 &#x3D; 127.</p><p>可以表示的最小二进制负数为1000 0000，即十进制数 -2^7 &#x3D; -128.</p><p><strong>这里强调一下</strong>，-128的补码是1000 0000，这是怎么来的呢，如果想按照前面的推导，我们是推导不出来的。其实-128、-8等是很特殊的数字，它的8位补码就是1000 0000，是人为规定的，我们记住就好了。实在想理解的话，可以参考<a href="https://link.zhihu.com/?target=https://www.cnblogs.com/flowerslip/p/5933833.html">这篇文章</a>，此作者就此问题作了十分清晰的阐述，读来受益匪浅。</p><p>担心这篇文章以后变成了404，所以这里也部分截图放上来。</p><img src="https://pic4.zhimg.com/v2-ab6062887a280241a182cab585ddc3ff_r.jpg" style="zoom:70%;" /><p>继续讨论原来的内容。</p><p>用补码来表示有符号数，使得我们可以用加法来实现减法。下面分四种情况来讨论。</p><p>这四种情况还是直接复制老师的PPT，</p><p>1.补码加法</p><img src="https://pic1.zhimg.com/v2-e6273188048950e34b8b68751f6d46c0_r.jpg" style="zoom:50%;" /><img src="https://pic3.zhimg.com/v2-10a6f41d52d4cbcf4186ee9a62832d2a_r.jpg" style="zoom:50%;" /><p>注意：当两个正数或者两个负数相加时，可能会产生溢出，例如用-9加-8，采用五位补码，相加结果位01111，即十进制数+15，结果发生错误，原因是5位补码能表示的十进制数范围，为-16到15，而(-9)+(-8) &#x3D; -17，已经溢出了。下图的第二个例子，9+8&#x3D;17，溢出的原因也是相同的。</p><img src="https://pic1.zhimg.com/v2-e215002279edc3a14ef6b44a130e0c50_r.jpg" style="zoom:50%;" /><p>复习中遇到了一个很绕人的问题，是关于-128的补码的问题。复习时请注意这一点。</p><p>二进制算术运算部分就到这里结束了。</p><h2 id="1-4-本章小结"><a href="#1-4-本章小结" class="headerlink" title="1.4 本章小结"></a>1.4 本章小结</h2><h1 id="第二章-逻辑代数基础"><a href="#第二章-逻辑代数基础" class="headerlink" title="第二章 逻辑代数基础"></a>第二章 逻辑代数基础</h1><h2 id="2-1-逻辑代数中的三种基本运算"><a href="#2-1-逻辑代数中的三种基本运算" class="headerlink" title="2.1 逻辑代数中的三种基本运算"></a>2.1 逻辑代数中的三种基本运算</h2><p><strong>与</strong>（<strong>AND</strong>）: Y&#x3D;A·B</p><p>真值表和图形符号：</p><p><img src="https://img-blog.csdnimg.cn/20181128164618322.png" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/201811281648486.png" style="zoom: 67%;" /></p><p>​<strong>或（OR）</strong>:Y&#x3D;A+B</p><p>真值表和图形符号:</p><p><img src="https://img-blog.csdnimg.cn/20181128165135413.png" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20181128165209278.png" style="zoom:67%;" /></p><p>非（NOT）： Y &#x3D; A**’**</p><p>真值表和图形符号：</p><p><img src="https://img-blog.csdnimg.cn/20181128165657110.png" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20181128165719497.png" style="zoom:67%;" /></p><p>常见的逻辑运算：<br> 与非（NAND）： Y &#x3D; (A · B)’，即与运算和非运算的组合，图形符号如下（小圆圈表示非运算）：</p><img src="https://img-blog.csdnimg.cn/20181128170507204.png" style="zoom:67%;" /><p>   或非（NOR）： Y &#x3D; (A + B)’ ，即或运算和非运算的组合，图形符号如下：</p><img src="https://img-blog.csdnimg.cn/2018112817083782.png" style="zoom:67%;" /><p>​    与或非（AND-NOR）： Y &#x3D; (A · B + C · D)’ ，即先与后或最后非的运算组合，图形符号如下：</p><img src="https://img-blog.csdnimg.cn/20181128171222243.png" style="zoom:67%;" /><p>​    异或（EXCLUSIVE OR）： Y &#x3D; A ⊕ B &#x3D; A · B’ + A’ · B，特征：“相异为1”，真值表和图形符号如下：</p><p><img src="https://img-blog.csdnimg.cn/20181128171918367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phY2tpZXpoYW5nMTk5Mw==,size_16,color_FFFFFF,t_70" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20181128171947480.png" style="zoom:67%;" />        </p><p>​    同或（EXCLUSIVE NOR）： Y &#x3D; A ⊙ B &#x3D; A · B + A’ · B’，特征：“相同为1”，真值表和图形符号如下：</p><p><img src="https://img-blog.csdnimg.cn/20181128172306207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phY2tpZXpoYW5nMTk5Mw==,size_16,color_FFFFFF,t_70" style="zoom:50%;" />            <img src="https://img-blog.csdnimg.cn/2018112817232920.png" style="zoom:67%;" />                                                     另外，异或和同或互为反运算，即有：</p><p>​    A⊕ B &#x3D; (A ⊙ B)’；                    </p><p>​            A ⊙ B &#x3D; (A ⊕ B )’。</p><h2 id="2-2-逻辑代数的基本公式和常用公式"><a href="#2-2-逻辑代数的基本公式和常用公式" class="headerlink" title="2.2 逻辑代数的基本公式和常用公式"></a>2.2 逻辑代数的基本公式和常用公式</h2><h2 id="2-3-逻辑代数的基本定理"><a href="#2-3-逻辑代数的基本定理" class="headerlink" title="2.3 逻辑代数的基本定理"></a>2.3 逻辑代数的基本定理</h2><h2 id="2-4-逻辑函数及其描述方法"><a href="#2-4-逻辑函数及其描述方法" class="headerlink" title="2.4 逻辑函数及其描述方法"></a>2.4 逻辑函数及其描述方法</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页设计（一）首页设计</title>
      <link href="/2022/06/12/%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/"/>
      <url>/2022/06/12/%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="Welcome-to-੭ˊ꒳苏砾ˋ✧的Wed首页"><a href="#Welcome-to-੭ˊ꒳苏砾ˋ✧的Wed首页" class="headerlink" title="Welcome    to   (੭ˊ꒳苏砾ˋ✧的Wed首页"></a>Welcome    to   (੭ˊ꒳苏砾ˋ✧的Wed首页</h1><p>下图为网站首页</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207180017616.png" alt="image-20220612161608147"></p><p>代码方面没有用到JS,只有一个index.html和两个CSS修饰文件，</p><p>代码书写步骤：<br>    本人习惯用VScode编写，当然编辑器也恶意，看个人爱好。</p><p>首先创建一个文件夹，名称随意。用VScode打开这个文件夹，创建一个html文件，文件名称设置为”index.html“,</p><p>创建文件夹起名为”css“，用来存放CSS文件。新建文件夹起名为‘’font”,新建文件夹起名为“image”</p><p>在文件夹css继续创建两个CSS文件，名称分别为：”index.css”和”all_css.css”。</p><p>font文件夹用来存放文字字体</p><p>imag文件夹用来存放网页图片</p><p>文件夹结构如图所示：</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207180017546.png" alt="image-20220612163706670"></p><p>代码部分：</p><p>index.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">            ੭ˊ꒳​苏砾ˋ✧的前端小窝</span><br><span class="line">        <span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;imag/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;imag/1.ico&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/index.css&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/all_css.css&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;੭ˊ꒳​苏砾ˋ✧的前端小窝&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;descripition&quot;</span> <span class="attr">content</span>=<span class="string">&quot;੭ˊ꒳​苏砾ˋ✧&quot;</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shell&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shell-top&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;word&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span> ੭꒳​苏砾✧前端小窝<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imag/4.png&quot;</span> <span class="attr">loop</span> <span class="attr">autoplay</span> <span class="attr">muted</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>index.css</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> <span class="selector-class">.shell-top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom, <span class="built_in">rgb</span>(<span class="number">24</span>, <span class="number">16</span>, <span class="number">61</span>), <span class="built_in">rgb</span>(<span class="number">31</span>, <span class="number">16</span>, <span class="number">25</span>));</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">body</span> <span class="selector-class">.shell-top</span> <span class="selector-tag">video</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">body</span> <span class="selector-class">.shell-top</span> <span class="selector-class">.word</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">220px</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.199</span>);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">body</span> <span class="selector-class">.shell-top</span> <span class="selector-class">.word</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">100</span> <span class="number">55px</span> <span class="string">&#x27;font&#x27;</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">34</span>, <span class="number">16</span>, <span class="number">226</span>, <span class="number">0.866</span>);</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>all_css.css</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;font&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;../font/优设标题黑_猫啃网.ttf&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 消除网页白边*/</span></span><br><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-class">.shell</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-class">.shell-main-footer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">100</span> <span class="number">30px</span> <span class="string">&#x27;font&#x27;</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#a1e6ff</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>注：</p><p>1.资源文件</p><p>字体文件：</p><p>链接：<a href="https://pan.baidu.com/s/1xaUQcHu_W5VE829eMDVI0Q?pwd=ebuh">https://pan.baidu.com/s/1xaUQcHu_W5VE829eMDVI0Q?pwd=ebuh</a><br>提取码：ebuh<br>–来自百度网盘超级会员V2的分享</p><p>图片如下（右键自行下载存放）：</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207180017271.png" alt="4"></p><p>2.代码中名称可自行修改，个人喜欢即可！！！</p><p>3.注意代码格式，未能实现下图效果，请检查资源文件存放，以及代码格式问题</p><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/202207180018600.png" alt="image-20220612164209439"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端网页设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 开发第一天</title>
      <link href="/2022/05/31/Android-%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
      <url>/2022/05/31/Android-%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> Android 开发日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模电期末大反攻</title>
      <link href="/2022/05/17/%E6%A8%A1%E7%94%B5%E6%9C%9F%E6%9C%AB%E5%A4%A7%E5%8F%8D%E6%94%BB/"/>
      <url>/2022/05/17/%E6%A8%A1%E7%94%B5%E6%9C%9F%E6%9C%AB%E5%A4%A7%E5%8F%8D%E6%94%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="期末大反攻"><a href="#期末大反攻" class="headerlink" title="期末大反攻"></a>期末大反攻</h2><h3 id="又临近期末了，要开始逐步复习模电了，下面是我边复习边总结的笔记，后续还会继续更新，希望能给正在学习模电的你带来一点点帮助。"><a href="#又临近期末了，要开始逐步复习模电了，下面是我边复习边总结的笔记，后续还会继续更新，希望能给正在学习模电的你带来一点点帮助。" class="headerlink" title="又临近期末了，要开始逐步复习模电了，下面是我边复习边总结的笔记，后续还会继续更新，希望能给正在学习模电的你带来一点点帮助。"></a>又临近期末了，要开始逐步复习<a href="https://www.zhihu.com/search?q=%E6%A8%A1%E7%94%B5&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22372022679%22%7D">模电</a>了，下面是我边复习边总结的笔记，后续还会继续更新，希望能给正在学习模电的你带来一点点帮助。</h3><h1 id="第一章-半导体二极管"><a href="#第一章-半导体二极管" class="headerlink" title="第一章   半导体二极管"></a>第一章   半导体二极管</h1><h2 id="一、半导体的基础知识"><a href="#一、半导体的基础知识" class="headerlink" title="一、半导体的基础知识"></a>一、半导体的基础知识</h2><h4 id="1、半导体——导电能力介于导体和绝缘体之间的物质（如硅Si、锗Ge）"><a href="#1、半导体——导电能力介于导体和绝缘体之间的物质（如硅Si、锗Ge）" class="headerlink" title="1、半导体——导电能力介于导体和绝缘体之间的物质（如硅Si、锗Ge）"></a>1、半导体——导电能力介于导体和绝缘体之间的物质（如硅Si、锗Ge）</h4><h3 id="2、特性——光敏、热敏和掺杂特性"><a href="#2、特性——光敏、热敏和掺杂特性" class="headerlink" title="2、特性——光敏、热敏和掺杂特性"></a>2、特性——光敏、热敏和掺杂特性</h3><h3 id="3、本征半导体——纯净具有单晶体结构的半导体。"><a href="#3、本征半导体——纯净具有单晶体结构的半导体。" class="headerlink" title="3、本征半导体——纯净具有单晶体结构的半导体。"></a>3、本征半导体——纯净具有单晶体结构的半导体。</h3><h3 id="4、两种载流子——带有正、负的可移动的空穴和电子统称为载流子。"><a href="#4、两种载流子——带有正、负的可移动的空穴和电子统称为载流子。" class="headerlink" title="4、两种载流子——带有正、负的可移动的空穴和电子统称为载流子。"></a>4、两种载流子——带有正、负的可移动的空穴和电子统称为载流子。</h3><h3 id="5、杂质半导体——在本征半导体中掺入微量杂质形成的半导体。体现的是半导体的掺杂特性。"><a href="#5、杂质半导体——在本征半导体中掺入微量杂质形成的半导体。体现的是半导体的掺杂特性。" class="headerlink" title="5、杂质半导体——在本征半导体中掺入微量杂质形成的半导体。体现的是半导体的掺杂特性。"></a>5、杂质半导体——在本征半导体中掺入微量杂质形成的半导体。体现的是半导体的掺杂特性。</h3><p>P型半导体——在本征半导体中掺入微量的三价元素（多子是空穴，少子是电子）</p><p>N型半导体——在本征半导体中掺入微量的五价元素（多子是电子，少子是空穴）</p><h3 id="6、杂质半导体的特性"><a href="#6、杂质半导体的特性" class="headerlink" title="6、杂质半导体的特性"></a>6、杂质半导体的特性</h3><p>载流子的浓度——多子浓度决定与杂质浓度（掺杂浓度），少子浓度与温度有关</p><p>体电阻——通常把杂质半导体自身的电阻称为电阻。</p><p>转型——通过改变掺杂浓度，一种杂质半导体可以改型为另一种杂质半导体</p><h3 id="7、PN结"><a href="#7、PN结" class="headerlink" title="7、PN结"></a>7、PN结</h3><p>PN结的接触电位差——硅材料约为0.6-0.8V，锗材料约为0.2-0.4V</p><p>PN结的单向导电性——正向偏通、反向截止。</p><h3 id="8、PN结的伏安特性曲线"><a href="#8、PN结的伏安特性曲线" class="headerlink" title="8、PN结的伏安特性曲线"></a>8、PN结的伏安特性曲线</h3><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh//vauable/Token/image-20220521150931035.png" alt="image-20220521150931035"></p><h2 id="二、半导体二极管"><a href="#二、半导体二极管" class="headerlink" title="二、半导体二极管"></a>二、半导体二极管</h2><h3 id="1、单向导电性——正向导通，反向截止"><a href="#1、单向导电性——正向导通，反向截止" class="headerlink" title="1、单向导电性——正向导通，反向截止"></a>1、单向导电性——正向导通，反向截止</h3><h3 id="2、二极管伏安特性——同PN结"><a href="#2、二极管伏安特性——同PN结" class="headerlink" title="2、二极管伏安特性——同PN结"></a>2、二极管伏安特性——同PN结</h3><h3 id="3、正向导通压降——硅管0-6-0-7V-锗管0-2-0-3V"><a href="#3、正向导通压降——硅管0-6-0-7V-锗管0-2-0-3V" class="headerlink" title="3、正向导通压降——硅管0.6-0.7V,锗管0.2-0.3V"></a>3、正向导通压降——硅管0.6-0.7V,锗管0.2-0.3V</h3><h3 id="4、死区电压——将二极管断开，分析二极管两端电位的高低："><a href="#4、死区电压——将二极管断开，分析二极管两端电位的高低：" class="headerlink" title="4、死区电压——将二极管断开，分析二极管两端电位的高低："></a>4、死区电压——将二极管断开，分析二极管两端电位的高低：</h3><p>​若阳极电压&gt;阴极电压，（正偏），二极管导通（短路）</p><p>​若阳极电压&lt;阴极电压，（反偏）。二极管(开路)</p><h3 id="5、等效电路法"><a href="#5、等效电路法" class="headerlink" title="5、等效电路法"></a>5、等效电路法</h3><h4 id="5-1、直流等效电路法"><a href="#5-1、直流等效电路法" class="headerlink" title="5.1、直流等效电路法"></a>5.1、直流等效电路法</h4><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521143941203.png" alt="image-20220521143941203"></p><h4 id="5-2、微变等效电路法"><a href="#5-2、微变等效电路法" class="headerlink" title="5.2、微变等效电路法"></a>5.2、微变等效电路法</h4><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521144116372.png" alt="image-20220521144116372"></p><h2 id="三、稳压二极管及其稳压电路"><a href="#三、稳压二极管及其稳压电路" class="headerlink" title="三、稳压二极管及其稳压电路"></a>三、稳压二极管及其稳压电路</h2><p>稳压二极管的特性——正常工作时处在PN结的反向击穿区，所以稳压二极管在电路中要反向来连接。</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521145433754.png" alt="image-20220521145433754"></p><h1 id="第二章-三极管及其放大电路"><a href="#第二章-三极管及其放大电路" class="headerlink" title="第二章  三极管及其放大电路"></a>第二章  三极管及其放大电路</h1><p>一、三极管的结构，类型及其特点</p><p>1.、类型————分为NPN和PNP两种。</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521173457514.png" alt="image-20220521173457514"></p><p>2、特点————基区很薄，且掺杂浓度最低；发射区掺杂浓度很高，与基区接触面积较小；集电区掺杂浓度较高，与基区接触面积较大。</p><p>二、  三极管的工作原理</p><p>1、 三极管的三种基本组态</p><p>（a）共发射极组态（b）共集电极组态（c）共基极组态</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521152353487.png" alt="image-20220521152353487"></p><p>2、  三极管内各极电流的分配</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521152437195.png" alt="image-20220521152437195"></p><p>共发射极电流放大系数（表明三极管时电流控制元件）</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521152902836.png" alt="image-20220521152902836"></p><p>3、  共射电路的特性曲线</p><p>输入特性曲线————同二极管</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521154519583.png" alt="image-20220521154519583"></p><p>输出特性曲线</p><p>放大区——发射极正偏，集电极反偏。</p><p>截止区——发射极反偏，集电极正偏。</p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521154740078.png" alt="image-20220521154740078" style="zoom: 67%;" /><p>4、温度影响</p><p>温度升高，输入特性曲线向左移动。</p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521161709637.png" alt="image-20220521161709637" style="zoom: 50%;" /><p>三、 低频小信号等效模型（简化）</p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521161913291.png" alt="image-20220521161913291" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521161928391.png" alt="image-20220521161928391" style="zoom:50%;" /><p>四、基本放大电路的组成及其原则</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521170823070.png" alt="image-20220521170823070"></p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521170854740.png" alt="image-20220521170854740"></p><p>五、  放大电路的图解分析法</p><p>1、直流通路与静态分析</p><p>概念——直流电流通的回路</p><p>画法——电容视为开路</p><p>作用——确定静态工作点</p><p>直流负载线——</p><p>电路参数对静态工作点的影响</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521182359055.png" alt="image-20220521182359055"></p><p>2.交流通路与动态分析</p><p>概念——交流电流通路的回路</p><p>画法——电容视为短路，理想直流电压源视为短路。</p><p>作用——分析信号被放大的过程</p><p>交流负载线——</p><p>3.静态工作点与非线性失真</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521182818242.png" alt="image-20220521182818242"></p><p>（1）截止失真</p><p>产生原因——Q点设置过低</p><p>失真原因——NPN管削顶，PNP管削底。</p><p>消除方法——减小Rb,增大Q</p><p>(2)饱和失真</p><p>产生原因——Q点设置过高</p><p>失真现象——NPN管削底，PNP削顶</p><p>消除方法——增大Rb、减小Rc、增大Vcc</p><p>4、  放大器的动态范围</p><p>（1） UbPP——是指放大器最大不失真输出电压的峰峰值。</p><p>（2）范围</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521184046604.png" alt="image-20220521184046604"></p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521184058127.png" alt="image-20220521184058127"></p><p>六、放大电路的等效电路法</p><p>1、静态分析</p><p>（1）静态工作点近似计算</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521184213004.png" alt="image-20220521184213004"></p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220521184224383.png" alt="image-20220521184224383"></p><p>（2） Q点在放大区的条件</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220527210207777.png" alt="image-20220527210207777"></p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220527210232942.png" alt="image-20220527210232942"></p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220527210302138.png" alt="image-20220527210302138"></p><p>七、分压式稳定工作点共射放大电路的等效电路法</p><ol><li>静态分析</li></ol><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220527210710047.png" alt="image-20220527210710047"></p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220527210835159.png" alt="image-20220527210835159"></p><p>2.动态分析</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220527210908927.png" alt="image-20220527210908927"></p><p><img src="http://rf52smtj8.hn-bkt.clouddn.com/202207170843787.png" alt="image-20220527210929734"></p><p><img src="http://rf52smtj8.hn-bkt.clouddn.com/202207170843550.png" alt="image-20220527210946820"></p><p>八、 共集电极基本放大电路</p><p>1、静态分析</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220527211037030.png" alt="image-20220527211037030"></p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220527211052081.png" alt="image-20220527211052081"></p><p><img src="http://rf52smtj8.hn-bkt.clouddn.com/202207170844034.jpeg"></p><p>​                                                                 <strong>三极管放大电路三种组态的主要性能</strong></p><h3 id="三极管多级放大电路"><a href="#三极管多级放大电路" class="headerlink" title="三极管多级放大电路"></a>三极管多级放大电路</h3><p>常见的多级放大电路有 共射——共基电路、共集——共集电路、共源——共基电路、共漏——共基电路等</p><p>级联放大电路总的电压增益等于组成它的各级单管放大带你路增压的乘积。结论可推广导多级放大电路</p><h4 id="共射——共基放大电路"><a href="#共射——共基放大电路" class="headerlink" title="共射——共基放大电路"></a>共射——共基放大电路</h4><p>优点：高频特性好，既有较宽的频带</p><h3 id="蜂考复习内容："><a href="#蜂考复习内容：" class="headerlink" title="蜂考复习内容："></a>蜂考复习内容：</h3><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/202207021711550.png" alt="image-20220702171046014"></p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/202207021712404.png" alt="image-20220702171248927"></p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/202207021714192.png" alt="image-20220702171359181"><img src="https://cdn.jsdelivr.net/gh/vauable/Token/202207021716941.png" alt="image-20220702171601857"></p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/202207031518302.png" alt=" " style="zoom:67%;" /><h1 id="第六章-频率响应"><a href="#第六章-频率响应" class="headerlink" title="第六章  频率响应"></a>第六章  频率响应</h1><h2 id="RC电路"><a href="#RC电路" class="headerlink" title="RC电路"></a>RC电路</h2><p>单位换算</p><img src="模电期末大反攻.assets/image-20220703174445922.png" style="zoom: 67%;" /><h3 id="RC高通电路频率响应"><a href="#RC高通电路频率响应" class="headerlink" title="RC高通电路频率响应"></a>RC高通电路频率响应</h3><p><img src="https://img.mianfeiwendang.com/pic/19d859adc570926fd54b27bd/2-326-png_6_0_0_84_459_766_346_892.979_1262.879-721-0-205-721.jpg"></p><p>RC低通电路频率响应</p><img src="https://pic2.zhimg.com/v2-8b7d8e695fcda76807f827fb3397bc41_1440w.jpg?source=172ae18b" style="zoom:33%;" /><img src="https://img-blog.csdnimg.cn/20200722161058386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5Nzk2Mjg3,size_16,color_FFFFFF,t_70" style="zoom: 67%;" /><h1 id="第八章-差分放大电路"><a href="#第八章-差分放大电路" class="headerlink" title="第八章 差分放大电路"></a>第八章 差分放大电路</h1><p>8.1  差分放大电路是抑制零点漂移最有效的电路结构</p><p><img src="https://pic4.zhimg.com/80/v2-544f1f2926f59e15537ab313ef99f693_1440w.jpg"></p><p>1）两管 <img src="https://www.zhihu.com/equation?tex=T_%7B1%7D" alt="[公式]"> 、 <img src="https://www.zhihu.com/equation?tex=T_%7B2%7D" alt="[公式]"> <strong>静态工作点相同</strong>。（因为电路结构对称，两管的特性即对应电阻元件的参数值都相等，所以他们的静态工作点也相同）。（—图中绿色）</p><p>（2）为了设置合适的静态工作点，电路采用 <img src="https://www.zhihu.com/equation?tex=+U_%7BCC%7D" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=-U_%7BEE%7D" alt="[公式]"> 两组电源供电，一般 <img src="https://www.zhihu.com/equation?tex=U_%7BCC%7D=U_%7BEE%7D" alt="[公式]"> 。（—图中橙色）</p><p>（3）差动放大电路常采用双端输入、双端输出的方式。即将两个输入信号，分别接在两个晶体管的基极与地之间，输出信号则从两个三极管的集电极之间取出。（—图中粉红色）</p><p>8.2差分放大电路的工作原理</p><p>1、当输入电压为0时（即静态 <img src="https://www.zhihu.com/equation?tex=u_%7Bi1%7D=u_%7Bi2%7D=0" alt="[公式]"> ）</p><p>两输入端与地之间可视为短路，负电源 <img src="https://www.zhihu.com/equation?tex=U_%7BEE%7D" alt="[公式]"> 通过 <img src="https://www.zhihu.com/equation?tex=R_%7BE%7D" alt="[公式]"> 为两个三极管提供偏置电流，以建立合适的静态工作点。</p><p>在理想的情况下，电路的左右两部分是完全对称的，那么两只晶体管 <img src="https://www.zhihu.com/equation?tex=T_%7B1%7D" alt="[公式]"> 与 <img src="https://www.zhihu.com/equation?tex=T_%7B2%7D" alt="[公式]"> 的集电极电流和集电极电位均应相等。（即 <img src="https://www.zhihu.com/equation?tex=I_%7BC1%7D=I_%7BC2%7D" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=V_%7BC1%7D=V_%7BC2%7D" alt="[公式]"> ）</p><p>所以输入电压 <img src="https://www.zhihu.com/equation?tex=u_%7Bo%7D=V_%7BC1%7D-V_%7BC2%7D=0" alt="[公式]"></p><p><img src="https://pic4.zhimg.com/80/v2-83ce6c787c27e1d68182adebbf5d02f7_1440w.jpg"></p><p>8.3差分放大电路的零点漂移抑制作用</p><p>1、当温度升高时，左右两个晶体管的集电极电流（ <img src="https://www.zhihu.com/equation?tex=I_%7BC1%7D" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=I_%7BC2%7D" alt="[公式]"> ）都随之增大，集电极电位 <img src="https://www.zhihu.com/equation?tex=V_%7BE%7D" alt="[公式]"> 都随之下降，由于参数相同，电路是完全对称的，所以变化量相等。</p><p>即 <img src="https://www.zhihu.com/equation?tex=%5CDelta+I_%7BC1%7D=%5CDelta+I_%7BC2%7D" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=%5CDelta+V_%7BC1%7D=%5CDelta+V_%7BC2%7D" alt="[公式]"></p><p><img src="https://pic4.zhimg.com/80/v2-83ce6c787c27e1d68182adebbf5d02f7_720w.jpg"></p><p>虽然两个管都产生了温度漂移，但由于两个集电极C的电位变化是完全相同的，所以输出电压依然为0，即 <img src="https://www.zhihu.com/equation?tex=u_%7Bo%7D=(V_%7BC1%7D+%5CDelta+V_%7BC1%7D)-(V_%7BC2%7D+%5CDelta+V_%7BC2%7D)=0" alt="[公式]"> 。</p><p>优点：差分放大电路对两管所产生的同向漂移都有抑制作用。</p><p>8.4典型差分放大电路</p><p>基本差动放大电路能够抑制零点漂移，是利用电路的对称性。但实际应用中，两个管子是不可能完全对称的，所以单纯依靠电路对称来抑制电路的零点漂移是有限度的。</p><p>为了进一步提高差分放大电路对零点漂移的抑制作用，可以在尽可能提高电路对称性的基础上，通过减少两个单管放大电路本身的零点漂移，来抑制整个差动放大电路的零点漂移。</p><p>在差动放大电路中，接入发射极公共电阻 <img src="https://www.zhihu.com/equation?tex=R_%7BE%7D" alt="[公式]"> ，其作用是，两个三极管的集电极电流（ <img src="https://www.zhihu.com/equation?tex=I_%7BC1%7D" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=I_%7BC2%7D" alt="[公式]"> ）基本保持不变。</p><p><img src="https://pic1.zhimg.com/80/v2-545a567b026620eded4b471fd915d770_720w.jpg"></p><p>原理流程如下：当温度 <img src="https://www.zhihu.com/equation?tex=T" alt="[公式]"> 升高时，两个三极管的集电极电流（ <img src="https://www.zhihu.com/equation?tex=I_%7BC1%7D" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=I_%7BC2%7D" alt="[公式]"> ）均增大，发射极公共电阻 <img src="https://www.zhihu.com/equation?tex=R_%7BE%7D" alt="[公式]"> 中流过的电流 <img src="https://www.zhihu.com/equation?tex=I_%7BE%7D" alt="[公式]"> &#x3D; <img src="https://www.zhihu.com/equation?tex=I_%7BE1%7D" alt="[公式]"> + <img src="https://www.zhihu.com/equation?tex=I_%7BE2%7D" alt="[公式]"> ，也会随之增大，发射极电位 <img src="https://www.zhihu.com/equation?tex=V_%7BE%7D" alt="[公式]"> 也随之增大，但由于基极电位是固定的（接地），因此两个三极管的发射结电压（ <img src="https://www.zhihu.com/equation?tex=U_%7BBE1%7D" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=U_%7BBE2%7D" alt="[公式]"> ）也会随之减小，从而使两个三极管的基极电流（ <img src="https://www.zhihu.com/equation?tex=I_%7BB1%7D" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=I_%7BB2%7D" alt="[公式]"> ）均减小，最后导致两个三极管的集电极电流（ <img src="https://www.zhihu.com/equation?tex=I_%7BC1%7D" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=I_%7BC2%7D" alt="[公式]"> ）均减小，这就抵消了由温度升高所引起的集电极电流（ <img src="https://www.zhihu.com/equation?tex=I_%7BC1%7D" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=I_%7BC2%7D" alt="[公式]"> ）增大的变化，从而使两个三极管的集电极电流（ <img src="https://www.zhihu.com/equation?tex=I_%7BC1%7D" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=I_%7BC2%7D" alt="[公式]"> )基本保持不变。</p><p><img src="https://pic3.zhimg.com/v2-e943b599105ee5bbb1b26cd2bbf93ff2_r.jpg"></p><p>​                                                          接入发射极公共电阻Re抵消温度变化影响的过程</p><p>8.5典型的差分放大电路静态分析</p><p>1、以下为差动放大电路的直流通路，由于电路对称，我们计算一个三极管的静态值即可。</p><p><img src="https://pic4.zhimg.com/80/v2-053d83972e5e484a4458b7d247e117d7_720w.png"></p><p>​        差动放大电路的直流通路</p><p>在静态时，设 <img src="https://www.zhihu.com/equation?tex=I_%7BB1%7D" alt="[公式]"> &#x3D; <img src="https://www.zhihu.com/equation?tex=I_%7BB2%7D" alt="[公式]"> &#x3D; <img src="https://www.zhihu.com/equation?tex=I_%7BB%7D" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=I_%7BC1%7D" alt="[公式]"> &#x3D; <img src="https://www.zhihu.com/equation?tex=I_%7BC2%7D" alt="[公式]"> &#x3D; <img src="https://www.zhihu.com/equation?tex=I_%7BC%7D" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=U_%7BCE1%7D" alt="[公式]"> &#x3D; <img src="https://www.zhihu.com/equation?tex=U_%7BCE2%7D" alt="[公式]"> &#x3D; <img src="https://www.zhihu.com/equation?tex=U_%7BCE%7D" alt="[公式]"> ，</p><p>则可得 <img src="https://www.zhihu.com/equation?tex=U_%7BBE%7D+2R_%7BE%7DI_%7BE%7D=U_%7BEE%7D" alt="[公式]"></p><p>则 <img src="https://www.zhihu.com/equation?tex=I_%7BB%7D=%5Cfrac%7BU_%7BEE%7D-U_%7BBE%7D%7D%7B2(1+%5Cbeta)R_%7BE%7D%7D%5Capprox+%5Cfrac%7BU_%7BEE%7D%7D%7B2%5Cbeta+R_%7BE%7D%7D" alt="[公式]"> （忽略 <img src="https://www.zhihu.com/equation?tex=U_%7BBE%7D" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=%5Cbeta%3E%3E1" alt="[公式]"> ）</p><p><img src="https://www.zhihu.com/equation?tex=I_%7BC%7D=%5Cbeta+I_%7BB%7D" alt="[公式]"></p><p>故 <img src="https://www.zhihu.com/equation?tex=U_%7BCE%7D=U_%7BCC%7D+U_%7BEE%7D-R_%7BC%7DI_%7BC%7D-2I_%7BE%7DR_%7BE%7D" alt="[公式]"></p><p>8.6差分放大电路的信号输入和输出形式</p><p>1、信号输入形式</p><p>（1）共模输入信号：指一对大小相等，相位相同的输入信号（即 <img src="https://www.zhihu.com/equation?tex=u_%7Bi1%7D=u_%7Bi2%7D" alt="[公式]"> ）（需要抑制）</p><p>在这对共模输入信号的作用下，由于电路完全是对称的，因此两个三极管集电极对地电压 <img src="https://www.zhihu.com/equation?tex=u_%7Bc1%7D=u_%7Bc2%7D" alt="[公式]"> ，差动输出电路的输出电压 <img src="https://www.zhihu.com/equation?tex=u_%7Bo%7D=u_%7Bi1%7D-u_%7Bi2%7D=0" alt="[公式]"> ，说明差动放大电路对共模信号没有放大作用，即共模电压放大倍数 <img src="https://www.zhihu.com/equation?tex=A_%7Bc%7D=0" alt="[公式]"> 。</p><p><strong>差动电路抑制共模信号能力的大小，反映了它对零点漂移的抑制水平。</strong></p><p>（2）差模输入信号(差动信号)：指一对大小相等，相位相反的输入信号（即 <img src="https://www.zhihu.com/equation?tex=u_%7Bi1%7D=-u_%7Bi2%7D" alt="[公式]"> ）</p><p>在这对差模信号的作用下，由于电路完全是对称的，因此两个三极管集电极对地电压 <img src="https://www.zhihu.com/equation?tex=u_%7Bc1%7D=-u_%7Bc2%7D" alt="[公式]"> ，差动输出电路的输出电压 <img src="https://www.zhihu.com/equation?tex=u_%7Bo%7D=u_%7Bi1%7D-u_%7Bi2%7D=2u_%7Bi1%7D" alt="[公式]"> ，说明差动放大电路对共模信号有放大作用，即共模电压放大倍数 <img src="https://www.zhihu.com/equation?tex=A_%7Bc%7D%5Cne0" alt="[公式]"> 。</p><p><strong>放大器只放大两个输入信号的差值信号，即差动放大电路（或差分放大电路）</strong></p><p>（3）比较输入(比较信号)：两个输入信号大小和极性任意（即 <img src="https://www.zhihu.com/equation?tex=u_%7Bi1%7D%5Cne+u_%7Bi2%7D" alt="[公式]"> ）</p><p>比较信号是实际应用中常见的信号，例如在闭环控制系统中， <img src="https://www.zhihu.com/equation?tex=u_%7Bi1%7D" alt="[公式]"> 为给定的电压信号， <img src="https://www.zhihu.com/equation?tex=u_%7Bi2%7D" alt="[公式]"> 为反馈的电压信号，两者在放大电路的输入端进行比较后，得出偏差值（即 <img src="https://www.zhihu.com/equation?tex=u_%7Bi1%7D-u_%7Bi2%7D" alt="[公式]"> ），差值电压经放大电路放大后，输出电压就是 <img src="https://www.zhihu.com/equation?tex=u_%7Bo%7D=A_%7Bu1%7Du_%7Bi1%7D-A_%7Bu2%7Du_%7Bi2%7D=A(u_%7Bi1%7D-u_%7Bi2%7D)" alt="[公式]"></p><p>为了分析方便，通常可以将比较输入信号分解为一对共模分量和一对差模分量，即可以将比较输入信号分解为一对共模输入信号和一对差模输入信号。</p><p>其中共模输入信号为 <img src="https://www.zhihu.com/equation?tex=u_%7Bic1%7D=u_%7Bic2%7D=(u_%7Bi1%7D+u_%7Bi2%7D)/2" alt="[公式]"> ；</p><p>差模输入信号为 <img src="https://www.zhihu.com/equation?tex=u_%7Bid1%7D=-u_%7Bid2%7D=(u_%7Bi1%7D-u_%7Bi2%7D)/2" alt="[公式]"> ；</p><p>【例1】 <img src="https://www.zhihu.com/equation?tex=u_%7Bi1%7D" alt="[公式]"> &#x3D;10mV， <img src="https://www.zhihu.com/equation?tex=u_%7Bi2%7D" alt="[公式]"> &#x3D;4mV，试将其分解为共模型信号与差模信号。</p><p>【解】</p><p>可分解成：</p><p><img src="https://www.zhihu.com/equation?tex=u_%7Bi1%7D" alt="[公式]"> &#x3D;7mV+3mV</p><p><img src="https://www.zhihu.com/equation?tex=u_%7Bi2%7D" alt="[公式]"> &#x3D;7mV-3mV</p><p>这样即可认为7mV为输入信号中的共模分量，±3mV为输入信号中的差模分量</p><p>【例2】 <img src="https://www.zhihu.com/equation?tex=u_%7Bi1%7D" alt="[公式]"> &#x3D;20mV， <img src="https://www.zhihu.com/equation?tex=u_%7Bi2%7D" alt="[公式]"> &#x3D;16mV，试将其分解为共模型信号与差模信号。</p><p>【解】</p><p>可分解成：</p><p><img src="https://www.zhihu.com/equation?tex=u_%7Bi1%7D" alt="[公式]"> &#x3D;18mV+2mV</p><p><img src="https://www.zhihu.com/equation?tex=u_%7Bi2%7D" alt="[公式]"> &#x3D;18mV-2mV</p><p>这样即可认为18mV为输入信号中的共模分量，±2mV为输入信号中的差模分量</p><p>2、单端输入</p><p>（1）定义：前面的例子中，差动放大电路的输入信号都是双端输入形式，即在差动放大电路的两个输入端都有信号输入，但在实际应用中，常常将差动放大电路的一个输入端加输入信号，另一个输入端接地，这种信号的输入形式，称为信号的<strong>单端输入</strong>。</p><p><img src="https://pic3.zhimg.com/80/v2-d53cb032a643b14b4993bcc81159d492_720w.jpg"></p><p>（2）这种情况可以认为差动放大电路输入的是一比较信号，只是输入条件为：</p><p><img src="https://www.zhihu.com/equation?tex=u_%7Bi1%7D=u_%7Bi%7D" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=u_%7Bi2%7D=0" alt="[公式]"> ；</p><p>从以上分析可知，虽然差动放大电路只在一个输入端输入信号，但其结果相当于在两个输入端都有输入，</p><p>其共模分量为 <img src="https://www.zhihu.com/equation?tex=u_%7Bic1%7D=u_%7Bic2%7D=u_%7Bi1%7D/2" alt="[公式]"> ；</p><p>其差模分量为： <img src="https://www.zhihu.com/equation?tex=u_%7Bid1%7D=u_%7Bi%7D/2" alt="[公式]"> 、 <img src="https://www.zhihu.com/equation?tex=u_%7Bid2%7D=-u_%7Bi%7D/2" alt="[公式]"> ；</p><p>这和双端输入信号的效果是完全一致的。</p><p>3、单端输出</p><p>（1）定义：从输出端来看，前面介绍的差分放大电路都是双端输出的形式，差分放大电路也可以采用单端输出的形式，</p><p>但需要注意两个问题：</p><p>一、当信号单端输出时，只得到了差动放大电路中三极管 <img src="https://www.zhihu.com/equation?tex=T_%7B1%7D" alt="[公式]"> 输出的变化量，而三极管 <img src="https://www.zhihu.com/equation?tex=T_%7B2%7D" alt="[公式]"> 输出的变化量未利用到，所以，<strong>放大器的电压放大倍数为双端输出时的一半</strong>；</p><p>二、输入信号和输出信号的相位关系，<strong>输入、输出信号都接在同一根三极管上，所以输出信号与输入信号相位相反</strong>。若输入、输出信号不在同一只三极管上，例如在 <img src="https://www.zhihu.com/equation?tex=T_%7B1%7D" alt="[公式]"> 管的基极加输入信号，在 <img src="https://www.zhihu.com/equation?tex=T_%7B2%7D" alt="[公式]"> 管的集电极取输出信号，则输出信号与输入信号在相位上相同；</p><p>（2）缺点：当采用单端输出形式时，差动放大电路从原理上抑制零点漂移的优势已经不存在了。但由于集电极电阻 <img src="https://www.zhihu.com/equation?tex=T_%7BE%7D" alt="[公式]"> 的作用，对零点漂移的抑制还是有很大的作用的。</p><p>8.7差分放大电路的动态分析</p><p>1、差动放大电路中，三极管 <img src="https://www.zhihu.com/equation?tex=T_%7B1%7D" alt="[公式]"> 的差模信号的交流通路如下图所示：</p><p><img src="https://pic4.zhimg.com/80/v2-7cc8ddacc7c30416a5c42dcd08b25693_720w.png"></p><p>​三极管T1的差模信号的交流通路</p><p>由于差模信号使两管的集电极电流一增一减，且变化量相等，所以流过 <img src="https://www.zhihu.com/equation?tex=R_%7BE%7D" alt="[公式]"> 的电流近似不变，所以 <img src="https://www.zhihu.com/equation?tex=R_%7BE%7D" alt="[公式]"> 对差模信号不起作用。</p><p>单管差模电压放大倍数：</p><p><img src="https://www.zhihu.com/equation?tex=A_%7Bd1%7D=%5Cfrac%7Bu_%7Bo1%7D%7D%7Bu_%7Bi1%7D%7D=%5Cfrac%7B-%5Cbeta+i_%7BB%7DR_%7BC%7D%7D%7Bi_%7BB%7Dr_%7Bbe%7D%7D=-%5Cfrac%7B%5Cbeta+R_%7BC%7D%7D%7Br_%7Bbe%7D%7D" alt="[公式]"> ；</p><p>同理可得双端输出电压为：</p><p><img src="https://www.zhihu.com/equation?tex=u_%7Bo%7D=u_%7Bo1%7D-u_%7Bo2%7D=A_%7Bd1%7Du_%7Bi1%7D-A_%7Bd2%7Du_%7Bi2%7D=A_%7Bd1%7D(u_%7Bi1%7D-u_%7Bi2%7D)" alt="[公式]">；</p><p>双端输入双端输出差模放大倍数：</p><p><img src="https://www.zhihu.com/equation?tex=A_%7Bd%7D=%5Cfrac%7Bu_%7Bo%7D%7D%7Bu_%7Bi1%7D-u_%7Bi2%7D%7D=A_%7Bd1%7D=-%5Cfrac%7B%5Cbeta+R_%7BC%7D%7D%7Br_%7Bbe%7D%7D" alt="[公式]"> ；</p><p>结论：可见，双端输入双端输出差模放大倍数 <img src="https://www.zhihu.com/equation?tex=A_%7Bd%7D" alt="[公式]"> 与单管差模放大倍数 <img src="https://www.zhihu.com/equation?tex=A_%7Bd1%7D" alt="[公式]"> 相等，当在两管的集电极之间接入负载电阻 <img src="https://www.zhihu.com/equation?tex=R_%7BL%7D" alt="[公式]"> 时，双端输入双端输出差动放大电路电压放大倍数为：</p><p><img src="https://www.zhihu.com/equation?tex=A_%7Bd%7D=%5Cfrac%7Bu_%7Bo%7D%7D%7Bu_%7Bi1%7D-u_%7Bi2%7D%7D=A_%7Bd1%7D=-%5Cfrac%7B%5Cbeta+R_%7BL%7D%5E%7B%27%7D%7D%7Br_%7Bbe%7D%7D" alt="[公式]"> ；</p><p>其中， <img src="https://www.zhihu.com/equation?tex=R_%7BL%7D%5E%7B%27%7D=R_%7BC%7D//%5Cfrac%7B1%7D%7B2%7DR_%7BL%7D" alt="[公式]"> （因为当输入差模信号时，一个管子的集电极点位降低，而另一个管子的集电极电位升高，因此，相当于在 <img src="https://www.zhihu.com/equation?tex=R_%7BL%7D" alt="[公式]"> 的中点，所以每个管子各占一半的负载）</p><p>2、若从 <img src="https://www.zhihu.com/equation?tex=T_%7B1%7D" alt="[公式]"> 集电极单端输出且空载时，则电压放大倍数为：</p><p><img src="https://www.zhihu.com/equation?tex=A_%7Bd%7D=%5Cfrac%7Bu_%7Bo1%7D%7D%7Bu_%7Bi1%7D-u_%7Bi2%7D%7D=%5Cfrac%7Bu_%7Bo1%7D%7D%7B2u_%7Bi1%7D%7D=-%5Cfrac%7B%5Cbeta+R_%7BC%7D%7D%7B2r_%7Bbe%7D%7D" alt="[公式]"> ；</p><p>若从 <img src="https://www.zhihu.com/equation?tex=T_%7B2%7D" alt="[公式]"> 集电极单端输出且空载时，则电压放大倍数为：</p><p><img src="https://www.zhihu.com/equation?tex=A_%7Bd%7D=%5Cfrac%7Bu_%7Bo2%7D%7D%7Bu_%7Bi1%7D-u_%7Bi2%7D%7D=%5Cfrac%7Bu_%7Bo2%7D%7D%7B2u_%7Bi1%7D%7D=-%5Cfrac%7B%5Cbeta+R_%7BC%7D%7D%7B2r_%7Bbe%7D%7D" alt="[公式]"> ；</p><p>结论：</p><p>由此可见，单端输出的放大倍数只有双端输出放大电路的一半。</p><p>两输入端之间的差模输入电阻为 <img src="https://www.zhihu.com/equation?tex=r_%7Bi%7D=2r_%7Bbe%7D" alt="[公式]"> ；</p><p>双端输出的差模输出电阻 <img src="https://www.zhihu.com/equation?tex=r_%7Bo%7D" alt="[公式]"> 为： <img src="https://www.zhihu.com/equation?tex=r_%7Bo%7D=2R_%7BC%7D" alt="[公式]"> ；</p><p>而单端输出的差模输出电阻 <img src="https://www.zhihu.com/equation?tex=r_%7Bo%7D" alt="[公式]"> 为： <img src="https://www.zhihu.com/equation?tex=r_%7Bo%7D=R_%7BC%7D" alt="[公式]"> ；</p><p>3、双端输入的差动放大电路分双端输出和单端输出的两种情况，同样，单端输入的差动放大电路也分双端输出和单端输出的两种情况。四种差动放大电路空载情况下的参数如下图：</p><p><img src="https://pic1.zhimg.com/v2-c9e938c50d18aef655582f2990d1d97c_r.jpg"></p><p>​四种差动放大电路参数比较</p><p>8.8差分放大电路的共模抑制比</p><p>1、差动放大电路很难做到完全对称，对共模信号仍有一定的放大作用，共模信号往往是噪声、温漂等无用的干扰信号，而差模信号是有用的信号。因此，希望差模电压放大倍数越大越好，共模电压放大倍数越小越好。</p><p>为了全面衡量差动放大电路放大差模信号和抑制共模信号的能力，通常以共模抑制比 <img src="https://www.zhihu.com/equation?tex=K_%7BCMRR%7D" alt="[公式]"> 参数作为评价指标：</p><p><img src="https://www.zhihu.com/equation?tex=K_%7BCMRR%7D=%5Cfrac%7BA_%7Bd%7D%7D%7BA_%7BC%7D%7D" alt="[公式]"> ，其中， <img src="https://www.zhihu.com/equation?tex=A_%7Bd%7D" alt="[公式]"> 为差模放大倍数， <img src="https://www.zhihu.com/equation?tex=A_%7BC%7D" alt="[公式]"> 为共模放大倍数。</p><p>或用对数形式表示为 <img src="https://www.zhihu.com/equation?tex=K_%7BCMR%7D(dB)=20lg%5Cfrac%7BA_%7Bd%7D%7D%7BA_%7BC%7D%7D(%E5%88%86%E8%B4%9D)" alt="[公式]"></p><p>结论：共模抑制比 <img src="https://www.zhihu.com/equation?tex=K_%7BCMRR%7D" alt="[公式]"> 越大，说明差放(差动放大电路)分辨差模信号的能力越强，而抑制共模信号的能力越强。因此 <img src="https://www.zhihu.com/equation?tex=K_%7BCMRR%7D" alt="[公式]"> 越大越好。在电路完全对称的情况下， <img src="https://www.zhihu.com/equation?tex=A_%7BC%7D=0" alt="[公式]"> ，则共模抑制比 <img src="https://www.zhihu.com/equation?tex=K_%7BCMRR%7D=%5Cinfty" alt="[公式]"> 。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五一假期上班第一天</title>
      <link href="/2022/05/01/%E4%BA%94%E4%B8%80%E6%94%BE%E5%81%87%E5%87%86%E5%A4%87%E6%94%B9%E8%A1%8C/"/>
      <url>/2022/05/01/%E4%BA%94%E4%B8%80%E6%94%BE%E5%81%87%E5%87%86%E5%A4%87%E6%94%B9%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><script>console.error("Error: [hexo-tag-aplayer] Unrecognized tag argument(2): autoplay=false");</script><p>昨天是五一放假第一天，没想到第一天上班成为了我唯一的的选择😫，今天准备徒手撸剑，再写一篇博客记录一下我的悲惨心态。不废话，上菜。</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220501160455298.png" alt="image-20220501160455298"></p><p>晚上画完图太晚了，还没有正式上色。等下一篇博客弥补一下遗憾。</p><p>制作基本流程是由一个正方体裁切拉伸变换来的，具体的只能各自自己尝试了，还是挺简单的。</p><p>软件用的是”Blender”</p><p><img src="https://cdn.jsdelivr.net/gh/vauable/Token/image-20220501161005183.png" alt="image-20220501161005183"></p><p>特点也比较多一点，免费，开源，体积小，适应性快。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blender </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视频集合</title>
      <link href="/2022/04/30/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E8%A7%86%E9%A2%91/"/>
      <url>/2022/04/30/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div align=center class="aspect-ratio">    <iframe src="https://player.bilibili.com/player.html?aid=9926758&&page=1&as_wide=1&high_quality=1&danmaku=0"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     high_quality=1    danmaku=1     allowfullscreen="true">     </iframe></div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/27/hello-world/"/>
      <url>/2022/04/27/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
